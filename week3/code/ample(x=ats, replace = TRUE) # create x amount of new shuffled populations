sample                  package:base                   R Documentation

_R_a_n_d_o_m _S_a_m_p_l_e_s _a_n_d _P_e_r_m_u_t_a_t_i_o_n_s

_D_e_s_c_r_i_p_t_i_o_n:

     ‘sample’ takes a sample of the specified size from the elements of
     ‘x’ using either with or without replacement.

_U_s_a_g_e:

     sample(x, size, replace = FALSE, prob = NULL)
     
     sample.int(n, size = n, replace = FALSE, prob = NULL,
                useHash = (!replace && is.null(prob) && size <= n/2 && n > 1e7))
     
_A_r_g_u_m_e_n_t_s:

       x: either a vector of one or more elements from which to choose,
          or a positive integer.  See ‘Details.’

       n: a positive number, the number of items to choose from.  See
          ‘Details.’

    size: a non-negative integer giving the number of items to choose.

 replace: should sampling be with replacement?

    prob: a vector of probability weights for obtaining the elements of
          the vector being sampled.

 useHash: ‘logical’ indicating if the hash-version of the algorithm
          should be used.  Can only be used for ‘replace = FALSE’,
          ‘prob = NULL’, and ‘size <= n/2’, and really should be used
          for large ‘n’, as ‘useHash=FALSE’ will use memory
          proportional to ‘n’.

_D_e_t_a_i_l_s:

     If ‘x’ has length 1, is numeric (in the sense of ‘is.numeric’) and
     ‘x >= 1’, sampling _via_ ‘sample’ takes place from ‘1:x’.  _Note_
     that this convenience feature may lead to undesired behaviour when
     ‘x’ is of varying length in calls such as ‘sample(x)’.  See the
     examples.

     Otherwise ‘x’ can be any R object for which ‘length’ and
     subsetting by integers make sense: S3 or S4 methods for these
     operations will be dispatched as appropriate.

     For ‘sample’ the default for ‘size’ is the number of items
     inferred from the first argument, so that ‘sample(x)’ generates a
     random permutation of the elements of ‘x’ (or ‘1:x’).

     It is allowed to ask for ‘size = 0’ samples with ‘n = 0’ or a
     length-zero ‘x’, but otherwise ‘n > 0’ or positive ‘length(x)’ is
     required.

     Non-integer positive numerical values of ‘n’ or ‘x’ will be
     truncated to the next smallest integer, which has to be no larger
     than ‘.Machine$integer.max’.

     The optional ‘prob’ argument can be used to give a vector of
     weights for obtaining the elements of the vector being sampled.
     They need not sum to one, but they should be non-negative and not
     all zero.  If ‘replace’ is true, Walker's alias method (Ripley,
     1987) is used when there are more than 200 reasonably probable
     values: this gives results incompatible with those from R < 2.2.0.

     If ‘replace’ is false, these probabilities are applied
     sequentially, that is the probability of choosing the next item is
     proportional to the weights amongst the remaining items.  The
     number of nonzero weights must be at least ‘size’ in this case.

     ‘sample.int’ is a bare interface in which both ‘n’ and ‘size’ must
     be supplied as integers.

     Argument ‘n’ can be larger than the largest integer of type
     ‘integer’, up to the largest representable integer in type
     ‘double’.  Only uniform sampling is supported.  Two random numbers
     are used to ensure uniform sampling of large integers.

_V_a_l_u_e:

     For ‘sample’ a vector of length ‘size’ with elements drawn from
     either ‘x’ or from the integers ‘1:x’.

     For ‘sample.int’, an integer vector of length ‘size’ with elements
     from ‘1:n’, or a double vector if n >= 2^31.

_R_e_f_e_r_e_n_c_e_s:

     Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) _The New S
     Language_.  Wadsworth & Brooks/Cole.

     Ripley, B. D. (1987) _Stochastic Simulation_. Wiley.

_S_e_e _A_l_s_o:

     ‘RNGkind(sample.kind = ..)’ about random number generation,
     notably the change of ‘sample()’ results with R version 3.6.0.

     CRAN package ‘sampling’ for other methods of weighted sampling
     without replacement.

_E_x_a_m_p_l_e_s:

     x <- 1:12
     # a random permutation
     sample(x)
     # bootstrap resampling -- only if length(x) > 1 !
     sample(x, replace = TRUE)
     
     # 100 Bernoulli trials
     sample(c(0,1), 100, replace = TRUE)
     
     ## More careful bootstrapping --  Consider this when using sample()
     ## programmatically (i.e., in your function or simulation)!
     
     # sample()'s surprise -- example
     x <- 1:10
         sample(x[x >  8]) # length 2
         sample(x[x >  9]) # oops -- length 10!
         sample(x[x > 10]) # length 0
     
     ## safer version:
     resample <- function(x, ...) x[sample.int(length(x), ...)]
     resample(x[x >  8]) # length 2
     resample(x[x >  9]) # length 1
     resample(x[x > 10]) # length 0
     
     ## R 3.x.y only
     sample.int(1e10, 12, replace = TRUE)
     sample.int(1e10, 12) # not that there is much chance of duplicates
     

