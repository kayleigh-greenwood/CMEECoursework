map <- map + theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank())
map <- map + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.1, 0.25))
map
dev.off()
map
# determine range of colour scale
minval <- min(resultsDF$corr)
maxval <- max(resultsDF$corr)
# create map
pdf(file="../../Images/PollutionSensitivityMap.pdf")
# base plot
map <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= corr), colour = "black")
# add colours
map <- map + scale_fill_gradient2(name="Sensitivity Score", midpoint = 0, mid = "white", high = "darkgoldenrod2", low = "blue4", limits = c(minval, maxval), space="Lab") # maybe would be better to make all countries below zero on a different colour gradient
# Remove axis titles and details
map <- map + theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank())
map <- map + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.1, 0.25))
map
dev.off()
map
dev.off()
pdf(file="../../Images/PollutionSensitivityBoxplot.pdf")
boxplot(corr ~ continent, data=resultsDF,  xlab = "Continent", ylab = "Sensitivity Score") # plot sensitivity score against continent (boxplot)
dev.off()
boxplot(corr ~ continent, data=resultsDF,  xlab = "Continent", ylab = "Sensitivity Score") # plot sensitivity score against continent (boxplot)
rm(list=ls())
source("~/CMEECoursework/Project/Code/ModellingScripts/LandUseModel.R", echo=TRUE)
rm(list=ls())
library(plotrix) # for std.error
library(graphics) # for boxplot
library(grDevices) # for pdf and dev.off
library(rnaturalearth) # for ne_countries
library(stats) # for lm
library(ggplot2) # for many plotting functions
library(countrycode) # for countrycode
library(dplyr) # for left_join
countryBD <- readRDS("../../Data/BiodiversityData/WrangledBiodiversityData.RDS")
countryBuilt <- readRDS("../../Data/LandUseData/WrangledLandUseData.RDS")
#match years of data
countryBD <- countryBD[c(intersect(colnames(countryBD), colnames(countryBuilt)))]
countryBuilt <- countryBuilt[(c(intersect(colnames(countryBD), colnames(countryBuilt))))]
# remove rows with NAs
countryBD <- na.omit(countryBD)
countryBuilt <- na.omit(countryBuilt)
# make sure a country is only included in either table if it is present in both
matchingcountrys <- intersect(countryBD$Country, countryBuilt$Country)
countryBD <- countryBD[countryBD$Country %in% matchingcountrys, ]
countryBuilt <- countryBuilt[countryBuilt$Country %in% matchingcountrys, ]
#create results data frame
resultsDF <- data.frame(matchingcountrys)
# adjust column name
colnames(resultsDF)[1] <- "country"
#make the countrys the row names
resultsDF$corr <- NA
resultsDF$se <- NA
# loop through countrys and find significant correlation coefficients
for (country in seq_along(matchingcountrys)){
BDvalues <- as.numeric(as.vector(countryBD[country,]))
Builtvalues <- as.numeric(as.vector(countryBuilt[country,]))
# fit model
model <- (lm(BDvalues~Builtvalues))
#add correlation result to results data frame
resultsDF$corr[country] <- as.numeric(model[[1]][2])
resultsDF$se[country] <- as.numeric(sqrt(diag(vcov(model)))[2])
}
View(resultsDF)
#add in continents and regions
resultsDF$continent <- countrycode(sourcevar = resultsDF$country,
origin = "country.name",
destination = "continent")
resultsDF$region <- countrycode(sourcevar = resultsDF$country,
origin = "country.name",
destination = "region")
# add western sahara to north africa
resultsDF[172, "region"] <- "Middle East & North Africa"
for (row in 1:nrow(resultsDF)){
if (resultsDF[row, "region"]=='Latin America & Caribbean'){
resultsDF[row, 4] <- 'S. America'
}
}
resultsDF$continent <- replace(resultsDF$continent, resultsDF$continent=='Americas', 'N. America')
for (row in 1:nrow(resultsDF)){
if (resultsDF[row, "region"]=='North America'){
resultsDF[row, 4] <- 'N. America'
}
}
# pivot BD dataframe longer
countryBD <- pivot_longer(countryBD, -c(Country), values_to = "Biodiversity", names_to = "Year")
countryBuilt <- pivot_longer(countryBuilt, -c(Country), values_to = "Built", names_to = "Year")
# merge data frames into one
alldata <- merge(countryBuilt, countryBD, by=c("Country", "Year"))
# investigate surprising outliers
Europesubset <- subset(resultsDF, resultsDF$continent == "Europe")
Europeanoutlier <- as.character(Europesubset[which(Europesubset$corr == max(Europesubset$corr)), "country"])
outlierdata <- alldata[c(which(alldata$Country == Europeanoutlier)), ]
irelandplot <- plot(outlierdata$Built, outlierdata$Biodiversity) # looks normal
# remove the outlier of Ireland
resultsDF <- subset(resultsDF, country != "Ireland")
# investigate surprising outliers
SAmericasubset <- subset(resultsDF, resultsDF$continent == "S. America")
SAmericanoutlier <- as.character(SAmericasubset[which(SAmericasubset$corr == min(SAmericasubset$corr)), "country"])
outlierdata <- alldata[c(which(alldata$Country == SAmericanoutlier)), ]
hondurasplot <- plot(outlierdata$Built, outlierdata$Biodiversity) # looks normal
# remove the outlier of Honduras
resultsDF <- subset(resultsDF, country != "Honduras")
# investigate surprising outliers
Oceaniasubset <- subset(resultsDF, resultsDF$continent == "Oceania")
Oceanianoutlier <- as.character(Oceaniasubset[which(Oceaniasubset$corr == max(Oceaniasubset$corr)), "country"])
outlierdata <- alldata[c(which(alldata$Country == Oceanianoutlier)), ]
samoaplot <- plot(outlierdata$Built, outlierdata$Biodiversity) # looks normal
# remove outlier
resultsDF <- subset(resultsDF, country != "Samoa")
# remove countries with SE of 0
resultsDF <- subset(resultsDF, se != 0)
theme_set(theme_bw())
world <- ne_countries(scale = "medium", returnclass = "sf")
mapdata <- map_data("world")
names(mapdata)[names(mapdata) == 'region'] <- 'country' # change the name of the countries column to match the other DF
mapdata <- left_join(mapdata, resultsDF, by='country') # join the data frames
View(mapdata)
minval = min(resultsDF$corr)
maxval = max(resultsDF$cor)
pdf(file="../../Images/LandUseSensitivityMap.pdf")
# base plot
map <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= corr), colour = "black")
# add colours
map <- map + scale_fill_gradient2(name="Sensitivity Score", midpoint = 0, mid = "white", high = "darkgoldenrod2", low = "blue4", limits = c(minval, maxval), space="Lab") # maybe would be better to make all countries below zero on a different colour gradient
# Remove axis titles and details
map <- map + theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank())
map <- map + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.1, 0.25))
map
dev.off()
map
dev.off()
ggplot(data = resultsDF, mapping = aes(y=corr, x=continent, xlab = "Continent", ylab = "Sensitivity Score")) +
geom_point() + #plot sensitivity score against continent (Scatter)
ylab("Sensitivity Score")
pdf(file="../../Images/LandUseSensitivityBoxplot.pdf")
boxplot(corr ~ continent, data=resultsDF,  xlab = "Continent", ylab = "Sensitivity Score") # plot sensitivity score against continent (boxplot)
dev.off()
mean(resultsDF$corr)
std.error(resultsDF$corr)
range(resultsDF$corr)
abundancetable <- table(resultsDF$continent)
resultsDF$continent <- relevel(factor(resultsDF$continent), ref = "Africa")
sensitivitymodel <- lm(resultsDF$corr ~ resultsDF$continent, weights = 1/(resultsDF$se))
summary(sensitivitymodel)
source("~/CMEECoursework/Project/Code/ModellingScripts/PollutionModel.R", echo=TRUE)
# base plot
map <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= corr), colour = "black")
# add colours
map <- map + scale_fill_gradient2(name="Sensitivity Score", midpoint = 0, mid = "white", high = "darkgoldenrod2", low = "blue4", limits = c(minval, maxval), space="Lab") # maybe would be better to make all countries below zero on a different colour gradient
# Remove axis titles and details
map <- map + theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank())
map <- map + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.1, 0.25))
map
source("~/CMEECoursework/Project/Code/ModellingScripts/InvasiveSpeciesModel.R", echo=TRUE)
View(countryBD)
class(map)
# save map for multi panelled plot
save(map, file = "../../Images/PollutionMap.rdata")
source("~/CMEECoursework/Project/Code/ModellingScripts/LandUseModel.R", echo=TRUE)
# save map for multi panelled plot
save(map, file = "../../Images/LandUseMap.rdata")
source("~/CMEECoursework/Project/Code/ModellingScripts/InvasiveSpeciesModel.R", echo=TRUE)
# save map for multi panelled plot
save(map, file = "../../Images/InvasiveMap.rdata")
source("~/CMEECoursework/Project/Code/ModellingScripts/ClimateModel.R", echo=TRUE)
# save map for multi panelled plot
save(map, file = "../../Images/ClimateMap.rdata")
#################################################################################################################################################
## SET UP WORKSPACE ##
#################################################################################################################################################
rm(list=ls())
#################################################################################################################################################
## IMPORT DATA ##
#################################################################################################################################################
load("../../Images/*.rdata")
#################################################################################################################################################
## SET UP WORKSPACE ##
#################################################################################################################################################
rm(list=ls())
getwd()
#################################################################################################################################################
## IMPORT DATA ##
#################################################################################################################################################
PollutionMap <- load("../../Images/PollutionMap.rdata")
PollutionMap
View(map)
dev.off()
dev.off()
PollutionMap
View(PollutionMap)
ggplot(PollutionMap)
source("~/CMEECoursework/Project/Code/ModellingScripts/ClimateModel.R", echo=TRUE)
source("~/CMEECoursework/Project/Code/ModellingScripts/InvasiveSpeciesModel.R", echo=TRUE)
source("~/CMEECoursework/Project/Code/ModellingScripts/LandUseModel.R", echo=TRUE)
source("~/CMEECoursework/Project/Code/ModellingScripts/LandUseModel.R", echo=TRUE)
source("~/CMEECoursework/Project/Code/ModellingScripts/PollutionModel.R", echo=TRUE)
source("~/CMEECoursework/Project/Code/ModellingScripts/PollutionModel.R", echo=TRUE)
#################################################################################################################################################
## IMPORT DATA ##
#################################################################################################################################################
source('ClimateModel.R', 'PollutionModel.R', 'LandUseModel.R', 'InvasiveSpeciesModel.R')
#################################################################################################################################################
## IMPORT DATA ##
#################################################################################################################################################
source('ClimateModel.R')
#################################################################################################################################################
## SET UP WORKSPACE ##
#################################################################################################################################################
rm(list=ls())
#################################################################################################################################################
## IMPORT DATA ##
#################################################################################################################################################
source('ClimateModel.R')
#################################################################################################################################################
## SET UP WORKSPACE ##
#################################################################################################################################################
rm(list=ls())
#################################################################################################################################################
## IMPORT DATA ##
#################################################################################################################################################
source('ClimateModel.R')
source('PollutionModel.R')
source('LandUseModel.R')
source('InvasiveSpeciesModel.R')
#################################################################################################################################################
## IMPORT DATA ##
#################################################################################################################################################
source('ClimateModel.R')
source('PollutionModel.R')
#################################################################################################################################################
## IMPORT DATA ##
#################################################################################################################################################
source('ClimateModel.R')
ClimateMap <- ClimateMap
View(ClimateMap)
ClimateMap
source('PollutionModel.R')
ClimateMap
source.all('../ModellingScripts/')
install.packages(source)
install.packages(source, repos=NULL)
install.packages('source')
#################################################################################################################################################
## IMPORT DATA ##
#################################################################################################################################################
source('ClimateModel.R')
#################################################################################################################################################
## SET UP WORKSPACE ##
#################################################################################################################################################
rm(list=ls())
x=10
#################################################################################################################################################
## IMPORT DATA ##
#################################################################################################################################################
source('ClimateModel.R')
search()
#################################################################################################################################################
## SET UP WORKSPACE ##
#################################################################################################################################################
rm(list=ls())
x=10
#################################################################################################################################################
## IMPORT DATA ##
#################################################################################################################################################
source('ClimateModel.R', local=.GlobalEnv)
#################################################################################################################################################
## SET UP WORKSPACE ##
#################################################################################################################################################
rm(list=ls())
#################################################################################################################################################
## IMPORT DATA ##
#################################################################################################################################################
source('ClimateModel.R', local=.GlobalEnv)
#################################################################################################################################################
## SET UP WORKSPACE ##
#################################################################################################################################################
rm(list=ls())
x=10
load('ClimateModel.R')
source2 <- function(file, start, end, ...) {
file.lines <- scan(file, what=character(), skip=start-1, nlines=end-start+1, sep='\n')
file.lines.collapsed <- paste(file.lines, collapse='\n')
source(textConnection(file.lines.collapsed), ...)
}
source2('ClimateModel.R', 7, 193)
source2('PollutionModel.R', 8, 174)
source2('InvasiveSpeciesModel.R', 8, 166)
source2('LandUseModel.R', 8, 179)
source("~/CMEECoursework/Project/Code/PlottingScripts/PlotMaps.R", echo=TRUE)
ClimateMap
InvasiveSpeciesMap
LandUseMap
PollutionMap
layout(matrix(1:4, ncol=2))
par(oma=c(4, 4, 4, 4), mar=c(4, 4, 4, 4))
ClimateMap
PollutionMap
InvasiveSpeciesMap
LandUseMap
source("~/CMEECoursework/Project/Code/ModellingScripts/ClimateModel.R", echo=TRUE)
source("~/CMEECoursework/Project/Code/ModellingScripts/PollutionModel.R", echo=TRUE)
source("~/CMEECoursework/Project/Code/ModellingScripts/PollutionModel.R", echo=TRUE)
dev.off()
source("~/CMEECoursework/Project/Code/ModellingScripts/PollutionModel.R", echo=TRUE)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
source("~/CMEECoursework/Project/Code/ModellingScripts/PollutionModel.R", echo=TRUE)
source("~/CMEECoursework/Project/Code/ModellingScripts/InvasiveSpeciesModel.R", echo=TRUE)
source("~/CMEECoursework/Project/Code/ModellingScripts/LandUseModel.R", echo=TRUE)
source("~/CMEECoursework/Project/Code/PlottingScripts/PlotMaps.R", echo=TRUE)
source("~/CMEECoursework/Project/Code/PlottingScripts/PlotMaps.R", echo=TRUE)
dev.off()
dev.off()
source("~/CMEECoursework/Project/Code/PlottingScripts/PlotMaps.R", echo=TRUE)
#################################################################################################################################################
## SET UP WORKSPACE ##
#################################################################################################################################################
rm(list=ls())
# create function that reads files but skips first few lines (because they contain rm(list=ls()))
source2 <- function(file, start, end, ...) {
file.lines <- scan(file, what=character(), skip=start-1, nlines=end-start+1, sep='\n')
file.lines.collapsed <- paste(file.lines, collapse='\n')
source(textConnection(file.lines.collapsed), ...)
}
# I manually included which lines to start and stop at so may have to alter as i go along
source2('ClimateModel.R', 7, 163)
source2('PollutionModel.R', 8, 174)
source2('InvasiveSpeciesModel.R', 8, 166)
source2('LandUseModel.R', 8, 179)
ClimateMap
dev.off()
dev.off()
#################################################################################################################################################
## SET UP WORKSPACE ##
#################################################################################################################################################
rm(list=ls())
# create function that reads files but skips first few lines (because they contain rm(list=ls()))
source2 <- function(file, start, end, ...) {
file.lines <- scan(file, what=character(), skip=start-1, nlines=end-start+1, sep='\n')
file.lines.collapsed <- paste(file.lines, collapse='\n')
source(textConnection(file.lines.collapsed), ...)
}
# I manually included which lines to start and stop at so may have to alter as i go along
source2('ClimateModel.R', 7, 163)
# I manually included which lines to start and stop at so may have to alter as i go along
source2('ClimateModel.R', 7, 163)
source2('PollutionModel.R', 8, 174)
source2('InvasiveSpeciesModel.R', 8, 166)
source2('LandUseModel.R', 8, 179)
#layout(matrix(1:4, ncol=2))
#par(oma=c(4, 4, 4, 4), mar=c(4, 4, 4, 4))
# base plot
ClimateMap <- ggplot(ClimateMapData, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= corr), colour = "black")
# add colours
ClimateMap <- ClimateMap + scale_fill_gradient2(name="Sensitivity Score", midpoint = 0, mid = "white", high = "darkgoldenrod2", low = "blue4", limits = c(-0.25, 0.1), space="Lab") # maybe would be better to make all countries below zero on a different colour gradient
# Remove axis titles and details
ClimateMap <- ClimateMap + theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank())
ClimateMap <- ClimateMap + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.1, 0.25))
ClimateMap
PollutionMap<- ggplot(PollutionMapData, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= corr), colour = "black")
# add colours
PollutionMap<- PollutionMap+ scale_fill_gradient2(name="Sensitivity Score", midpoint = 0, mid = "white", high = "darkgoldenrod2", low = "blue4", limits = c(minval, maxval), space="Lab") # maybe would be better to make all countries below zero on a different colour gradient
# Remove axis titles and details
PollutionMap<- PollutionMap+ theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank())
PollutionMap<- PollutionMap+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.1, 0.25))
PollutionMap
source("~/CMEECoursework/Project/Code/ModellingScripts/PollutionModel.R", echo=TRUE)
PollutionMap
#################################################################################################################################################
## SET UP WORKSPACE ##
#################################################################################################################################################
rm(list=ls())
# create function that reads files but skips first few lines (because they contain rm(list=ls()))
source2 <- function(file, start, end, ...) {
file.lines <- scan(file, what=character(), skip=start-1, nlines=end-start+1, sep='\n')
file.lines.collapsed <- paste(file.lines, collapse='\n')
source(textConnection(file.lines.collapsed), ...)
}
# I manually included which lines to start and stop at so may have to alter as i go along
source2('ClimateModel.R', 7, 163)
source2('PollutionModel.R', 8, 174)
source2('InvasiveSpeciesModel.R', 8, 166)
source2('LandUseModel.R', 8, 179)
PollutionMap<- ggplot(PollutionMapData, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= corr), colour = "black")
# add colours
PollutionMap<- PollutionMap+ scale_fill_gradient2(name="Sensitivity Score", midpoint = 0, mid = "white", high = "darkgoldenrod2", low = "blue4", limits = c(minval, maxval), space="Lab") # maybe would be better to make all countries below zero on a different colour gradient
# Remove axis titles and details
PollutionMap<- PollutionMap+ theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank())
PollutionMap<- PollutionMap+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.1, 0.25))
PollutionMap
View(PollutionMapData)
source("~/CMEECoursework/Project/Code/ModellingScripts/PollutionModel.R", echo=TRUE)
minval
maxval
format(minval, scientific=FALSE)
format(maxval, scientific=FALSE)
source("~/CMEECoursework/Project/Code/ModellingScripts/PollutionModel.R", echo=TRUE)
PollutionMap
#####################
## INVASIVE SPECIES MAP ##
#########################
InvasiveSpeciesMap<- ggplot(InvasiveSpeciesMapData, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= corr), colour = "black")
source("~/CMEECoursework/Project/Code/PlottingScripts/PlotMaps.R", echo=TRUE)
source("~/CMEECoursework/Project/Code/ModellingScripts/LandUseModel.R", echo=TRUE)
format(minval, scientific = FALSE)
format(maxval, scientific = FALSE)
source("~/CMEECoursework/Project/Code/ModellingScripts/LandUseModel.R", echo=TRUE)
LandUseMap
source("~/CMEECoursework/Project/Code/ModellingScripts/LandUseModel.R", echo=TRUE)
LandUseMap
source("~/CMEECoursework/Project/Code/ModellingScripts/LandUseModel.R", echo=TRUE)
LandUseMap
source("~/CMEECoursework/Project/Code/ModellingScripts/ClimateModel.R", echo=TRUE)
source("~/CMEECoursework/Project/Code/ModellingScripts/ClimateModel.R", echo=TRUE)
format(minval, scientific = FALSE)
format(maxval, scientific = FALSE)
source("~/CMEECoursework/Project/Code/ModellingScripts/LandUseModel.R", echo=TRUE)
LandUseMap
source("~/CMEECoursework/Project/Code/PlottingScripts/PlotMaps.R", echo=TRUE)
layout(matrix(1:4, ncol=2))
par(oma=c(4, 4, 4, 4), mar=c(4, 4, 4, 4))
ClimateMap
PollutionMap
LandUseMap
InvasiveSpeciesMap
dev.off()
x = c(1,2,3,4,5)
y = c(1,2,3,4,5)
layout(matrix(1:4, ncol=2))
par(oma=c(4, 4, 4, 4), mar=c(4, 4, 4, 4))
plot(x,y)
plot(x,y)
plot(x,y)
plot(x,y)
layout(matrix(1:4, ncol=2))
dev.off()
layout(matrix(1:4, ncol=2))
par(oma=c(4, 4, 4, 4), mar=c(4, 4, 4, 4))
ggplot(ClimateMapData, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= corr), colour = "black")
dev.off()
#layout(matrix(1:4, ncol=2))
par(mfrow=c(2,2))
ClimateMap
ggplot(LandUseMapData, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= corr), colour = "black")
plot(x,y)
dev.off()
#layout(matrix(1:4, ncol=2))
par(mfrow=c(2,2))
ggplot(x,y)
ggplot(aes(x=x, y=y))
View(LandUseMapData)
ggplot(LandUseMapData, aes(x=group, y=order))
dev.off()
#layout(matrix(1:4, ncol=2))
par(mfrow=c(2,2))
ggplot(LandUseMapData, aes(x=group, y=order))
source("~/CMEECoursework/Project/Code/ModellingScripts/LandUseModel.R", echo=TRUE)
source("~/CMEECoursework/Project/Code/ModellingScripts/InvasiveSpeciesModel.R", echo=TRUE)
source("~/CMEECoursework/Project/Code/ModellingScripts/PollutionModel.R", echo=TRUE)
dev.off()
source("~/CMEECoursework/Project/Code/ModellingScripts/PollutionModel.R", echo=TRUE)
source("~/CMEECoursework/Project/Code/ModellingScripts/ClimateModel.R", echo=TRUE)
