stepspergen <- (length(community)/2)
} else {
direction <- sample(c(1,2), 1)
if (direction==1){
stepspergen <- ((length(community)/2)+0.5)
} else {
stepspergen <- ((length(community)/2)-0.5)
}
}
# determined how many steps are within one generation of the community, depends on size of community
# the reason a generation is composed of generation/2 amount of steps is that a generation is the amount of time expected between birth and reproduction, not the time between birth and death, which is longer if generations overlap
# For example, if there are 10 individuals in the system then 5 neutral steps correspond to 5births and 5 deaths, one generation.
for (i in 1:(stepspergen)){
community <- neutral_step(community)
# complete all steps within the generation
}
return(community)
}
community <- c(1,2,3,4,5)
if ((length(community)%%2)==0){
stepspergen <- (length(community)/2)
} else {
direction <- sample(c(1,2), 1)
if (direction==1){
stepspergen <- ((length(community)/2)+0.5)
} else {
stepspergen <- ((length(community)/2)-0.5)
}
}
stepspergen
for (i in 1:(stepspergen)){
community <- neutral_step(community)
# complete all steps within the generation
}
community
neutral_time_series <- function(community,duration)  {
# do a neutral theory simulation and return a time series of species richness in the system
speciesrichness <- c()
speciesrichness <- append(speciesrichness, species_richness(community))
for (i in 1:duration){
# run simulation
community <- neutral_generation(community)
speciesrichness <- append(speciesrichness, species_richness(community))
}
return (speciesrichness)
}
speciesrichness
neutral_time_series(community= init_community_max(7) , duration = 20)
neutral_time_series(community= init_community_max(100) , duration = 200)
neutral_step <- funtion(v){
choochoo <- choose_two(v)
v[v==choochoo[1]] <-choochoo[2]
return(v)
}
# Question 6
neutral_generation <- function(community){
if ((length(community)%%2)==0){
stepspergen <- (length(community)/2)
} else {
direction <- sample(c(1,2), 1)
if (direction==1){
stepspergen <- ((length(community)/2)+0.5)
} else {
stepspergen <- ((length(community)/2)-0.5)
}
}
# determined how many steps are within one generation of the community, depends on size of community
# the reason a generation is composed of generation/2 amount of steps is that a generation is the amount of time expected between birth and reproduction, not the time between birth and death, which is longer if generations overlap
# For example, if there are 10 individuals in the system then 5 neutral steps correspond to 5births and 5 deaths, one generation.
for (i in 1:(stepspergen)){
community <- neutral_step(community)
# complete all steps within the generation
}
return(community)
}
neutral_step <- funtion(v){
choochoo <- choose_two(v)
v[v==choochoo[1]] <-choochoo[2]
return(v)
}
neutral_step <- function(v){
choochoo <- choose_two(v)
v[v==choochoo[1]] <-choochoo[2]
return(v)
}
# Question 6
neutral_generation <- function(community){
if ((length(community)%%2)==0){
stepspergen <- (length(community)/2)
} else {
direction <- sample(c(1,2), 1)
if (direction==1){
stepspergen <- ((length(community)/2)+0.5)
} else {
stepspergen <- ((length(community)/2)-0.5)
}
}
# determined how many steps are within one generation of the community, depends on size of community
# the reason a generation is composed of generation/2 amount of steps is that a generation is the amount of time expected between birth and reproduction, not the time between birth and death, which is longer if generations overlap
# For example, if there are 10 individuals in the system then 5 neutral steps correspond to 5births and 5 deaths, one generation.
for (i in 1:(stepspergen)){
community <- neutral_step(community)
# complete all steps within the generation
}
return(community)
}
# Question 7
neutral_time_series <- function(community,duration)  {
# do a neutral theory simulation and return a time series of species richness in the system
speciesrichness <- c()
speciesrichness <- append(speciesrichness, species_richness(community))
for (i in 1:duration){
# run simulation
community <- neutral_generation(community)
speciesrichness <- append(speciesrichness, species_richness(community))
}
return (speciesrichness)
}
neutral_time_series(community= init_community_max(7) , duration = 20)
neutral_time_series(community= init_community_max(100) , duration = 200)
neutral_time_series(community= init_community_max(100) , duration = 200)
# CMEE 2021 HPC excercises R code main pro forma
# you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
name <- "Kayleigh Greenwood"
preferred_name <- "Kayleigh"
email <- "kg21@imperial.ac.uk"
username <- "kayleigh-greenwood"
# please remember *not* to clear the workspace here, or anywhere in this file. If you do, it'll wipe out your username information that you entered just above, and when you use this file as a 'toolbox' as intended it'll also wipe away everything you're doing outside of the toolbox.  For example, it would wipe away any automarking code that may be running and that would be annoying!
# Question 1
species_richness <- function(community){
return (length(unique(community)))
# return how many unique numbers(species) there are in the vector(community)
}
# Question 2
init_community_max <- function(size){
return (seq(1,size))
# create vector representing community with maximum species richness
}
# Question 3
init_community_min <- function(size){
return (rep(1,size))
# create vector representing community with minimum species richness
}
# Question 4
choose_two <- function(max_value){
return (sample(max_value, 2, replace = FALSE))
# choose two random indexes within the sequence from 1 to max_value
}
# Question 5
neutral_step <- function(community){
# remove one individual from the community and replace it with the offspring of another
indexes <- choose_two(length(community))
# choose which individual to replace and which individual's offspring to replace it
newcommunity <- community[-(indexes[1])]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, community[indexes[2]], after=(indexes[1]-1))
# replace the old individual with the chosen offspring
community <- newcommunity
# reset the community variables for the next loop
return (community)
}
# Question 6
neutral_generation <- function(community){
if ((length(community)%%2)==0){
stepspergen <- (length(community)/2)
} else {
direction <- sample(c(1,2), 1)
if (direction==1){
stepspergen <- ((length(community)/2)+0.5)
} else {
stepspergen <- ((length(community)/2)-0.5)
}
}
# determined how many steps are within one generation of the community, depends on size of community
# the reason a generation is composed of generation/2 amount of steps is that a generation is the amount of time expected between birth and reproduction, not the time between birth and death, which is longer if generations overlap
# For example, if there are 10 individuals in the system then 5 neutral steps correspond to 5births and 5 deaths, one generation.
for (i in 1:(stepspergen)){
community <- neutral_step(community)
# complete all steps within the generation
}
return(community)
}
# Question 7
neutral_time_series <- function(community,duration)  {
# do a neutral theory simulation and return a time series of species richness in the system
speciesrichness <- c()
speciesrichness <- append(speciesrichness, species_richness(community))
for (i in 1:duration){
# run simulation
community <- neutral_generation(community)
speciesrichness <- append(speciesrichness, species_richness(community))
}
return (speciesrichness)
}
# Question 8
question_8 <- function() {
# answers the following question:
# What state will the system always converge to if you wait long enough? Why is this?
# clear any existing graphs and plot your graph within the R window
graphics.off()
community <- init_community_max(100)
speciesrichness <- neutral_time_series(community, 200)
plot(speciesrichness, type="o")
return("The system will always converge to a species richness of 1. This will happen so long as speciation is 0. This is because the only possibilities are either; species richness stays the same (if when an individual dies, it is replaced by offspring of its' own species), or species richness declines (when an individual dies, it is replaced by an individual of another species). Because there is always a change that species richness will decrease, this means that species richness will decline over time and eventually, the community will consist of only one species.")
}
# Question 9
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with the offspring of another
indexes <- choose_two(length(community))
# choose which individual to replace and which individual's offspring to replace it
newcommunity <- community[-(indexes[1])]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, community[indexes[2]], after=(indexes[1]-1))
# replace the old individual with the chosen offspring
community <- newcommunity
# reset the community variables for the next loop
return (community)
}
}
# Question 10
neutral_generation_speciation <- function(community,speciation_rate)  {
}
neutral_time_series(community= init_community_max(100) , duration = 200)
question_8 <- function() {
# answers the following question:
# What state will the system always converge to if you wait long enough? Why is this?
# clear any existing graphs and plot your graph within the R window
graphics.off()
community <- init_community_max(100)
speciesrichness <- neutral_time_series(community, 200)
plot(speciesrichness, type="o")
return("The system will always converge to a species richness of 1. This will happen so long as speciation is 0. This is because the only possibilities are either; species richness stays the same (if when an individual dies, it is replaced by offspring of its' own species), or species richness declines (when an individual dies, it is replaced by an individual of another species). Because there is always a change that species richness will decrease, this means that species richness will decline over time and eventually, the community will consist of only one species.")
}
question_8()
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with a new species
print(community)
return (community)
}
}
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with a new species
print(community)
return (community)
}
neutral_step_speciation(c(1,2,3,4,5), 3)
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with a new species
print(max(community))
return (community)
}
neutral_step_speciation(c(1,2,3,4,5), 3)
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with a new species
print((max(community))+1)
return (community)
}
neutral_step_speciation(c(1,2,3,4,5), 3)
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with a new species
newspecies <- max(community)+1
print(newspecies)
return (community)
}
neutral_step_speciation(c(1,2,3,4,5), 3)
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with a new species
index <- sample(length(community), 1)
# choose which individual to replace
newcommunity <- community[-(index)]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, max(community)+1, after=((index)-1))
# replace the old individual with the chosen offspring
return (community)
}
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with a new species
index <- sample(length(community), 1)
# choose which individual to replace
newcommunity <- community[-(index)]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, max(community)+1, after=((index)-1))
# replace the old individual with the chosen offspring
return (community)
}
neutral_step_speciation(c(1,2,3,4,5),10)
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with a new species
index <- sample(length(community), 1)
# choose which individual to replace
newcommunity <- community[-(index)]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, max(community)+1, after=((index)-1))
# replace the old individual with the chosen offspring
community <- newcommunity
return (community)
}
neutral_step_speciation(c(1,2,3,4,5),10)
?runig
?runif
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with a new species
random <- runif(1, min = 0, max = 1)
if (runif <= speciation_rate){
index <- sample(length(community), 1)
# choose which individual to replace
newcommunity <- community[-(index)]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, max(community)+1, after=((index)-1))
# replace the old individual with the chosen offspring
} else {
indexes <- choose_two(length(community))
# choose which individual to replace and which individual's offspring to replace it
newcommunity <- community[-(indexes[1])]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, community[indexes[2]], after=(indexes[1]-1))
# replace the old individual with the chosen offspring
}
community <- newcommunity
return (community)
}
neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
# Question 9
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with a new species
random <- runif(1, min = 0, max = 1)
if (random <= speciation_rate){
index <- sample(length(community), 1)
# choose which individual to replace
newcommunity <- community[-(index)]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, max(community)+1, after=((index)-1))
# replace the old individual with the chosen offspring
} else {
indexes <- choose_two(length(community))
# choose which individual to replace and which individual's offspring to replace it
newcommunity <- community[-(indexes[1])]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, community[indexes[2]], after=(indexes[1]-1))
# replace the old individual with the chosen offspring
}
community <- newcommunity
return (community)
}
neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
neutral_step_speciation(community, 0.5)
neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
community
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
community
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
community
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
community
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
community
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
community
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
community
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
community
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
community
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
community
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
community
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
community
max(community)+1
max(community)+1
max(community)+1
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with a new species
uniques <- unique(community)
print(uniques)
random <- runif(1, min = 0, max = 1)
# generate random number between 0 and 1 to determine whether to introduce new species or not
if (random <= speciation_rate){
index <- sample(length(community), 1)
# choose which individual to replace
newcommunity <- community[-(index)]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, max(community)+1, after=((index)-1))
# replace the old individual with the chosen offspring
} else {
indexes <- choose_two(length(community))
# choose which individual to replace and which individual's offspring to replace it
newcommunity <- community[-(indexes[1])]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, community[indexes[2]], after=(indexes[1]-1))
# replace the old individual with the chosen offspring
}
community <- newcommunity
return (community)
}
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with a new species
uniques <- unique(community)
print(uniques)
random <- runif(1, min = 0, max = 1)
# generate random number between 0 and 1 to determine whether to introduce new species or not
if (random <= speciation_rate){
index <- sample(length(community), 1)
# choose which individual to replace
newcommunity <- community[-(index)]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, max(uniques)+1, after=((index)-1))
# replace the old individual with the chosen offspring
} else {
indexes <- choose_two(length(community))
# choose which individual to replace and which individual's offspring to replace it
newcommunity <- community[-(indexes[1])]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, community[indexes[2]], after=(indexes[1]-1))
# replace the old individual with the chosen offspring
}
community <- newcommunity
return (community)
}
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with a new species
totalspecies <- append(totalspecies, community)
uniques <- unique(totalspecies)
# determines which species have been used
random <- runif(1, min = 0, max = 1)
# generate random number between 0 and 1 to determine whether to introduce new species or not
if (random <= speciation_rate){
index <- sample(length(community), 1)
# choose which individual to replace
newcommunity <- community[-(index)]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, max(uniques)+1, after=((index)-1))
# replace the old individual with the chosen offspring
} else {
indexes <- choose_two(length(community))
# choose which individual to replace and which individual's offspring to replace it
newcommunity <- community[-(indexes[1])]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, community[indexes[2]], after=(indexes[1]-1))
# replace the old individual with the chosen offspring
}
community <- newcommunity
print(community)
return (community)
}
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with a new species
if ((totalspecies)==FALSE) {
totalspecies <- c()
} else {
totalspecies <- append(totalspecies, community)
}
uniques <- unique(totalspecies)
# determines which species have been used
random <- runif(1, min = 0, max = 1)
# generate random number between 0 and 1 to determine whether to introduce new species or not
if (random <= speciation_rate){
index <- sample(length(community), 1)
# choose which individual to replace
newcommunity <- community[-(index)]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, max(uniques)+1, after=((index)-1))
# replace the old individual with the chosen offspring
} else {
indexes <- choose_two(length(community))
# choose which individual to replace and which individual's offspring to replace it
newcommunity <- community[-(indexes[1])]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, community[indexes[2]], after=(indexes[1]-1))
# replace the old individual with the chosen offspring
}
community <- newcommunity
print(community)
return (community)
}
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with a new species
random <- runif(1, min = 0, max = 1)
# generate random number between 0 and 1 to determine whether to introduce new species or not
if (random <= speciation_rate){
index <- sample(length(community), 1)
# choose which individual to replace
newcommunity <- community[-(index)]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, max(community)+1, after=((index)-1))
# replace the old individual with the chosen offspring
} else {
indexes <- choose_two(length(community))
# choose which individual to replace and which individual's offspring to replace it
newcommunity <- community[-(indexes[1])]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, community[indexes[2]], after=(indexes[1]-1))
# replace the old individual with the chosen offspring
}
community <- newcommunity
print(community)
return (community)
}
community <- neutral_step_speciation(c(1,2,3,4,5,6,7,8,9), 0.5)
community <- neutral_step_speciation(community, 0.5)
community <- neutral_step_speciation(community, 0.5)
community <- neutral_step_speciation(community, 0.5)
community <- neutral_step_speciation(community, 0.5)
