community <- init_community_min(size)
counter = 0
speciesrichness <- c()
abundanceoctaves <- list()
while (((proc.time()[3])-ptm) < (wall_time*60)) {
counter = counter + 1
community <- neutral_generation_speciation(community, speciation_rate)
if (((counter %% interval_rich)==0) && (counter <= burn_in_generations)){
speciesrichness <- append(speciesrichness, species_richness(community))
}
if ((counter %% interval_oct) == 0){
abundanceoctaves <- append(abundanceoctaves, list(octaves(species_abundance(community))))
}
}
elapsedtime <- (proc.time()[3]-ptm)
save(speciesrichness, abundanceoctaves, community, elapsedtime, speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, file = output_file_name)
}
cluster_run(speciation_rate = 0.1, size=100, wall_time=10, interval_rich=1, interval_oct=10, burn_in_generations=200, output_file_name="my_test_file_1.rda")
# CMEE 2021 HPC excercises R code main pro forma
# you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
name <- "Kayleigh Greenwood"
preferred_name <- "Kayleigh"
email <- "kg21@imperial.ac.uk"
username <- "kayleigh-greenwood"
# please remember *not* to clear the workspace here, or anywhere in this file. If you do, it'll wipe out your username information that you entered just above, and when you use this file as a 'toolbox' as intended it'll also wipe away everything you're doing outside of the toolbox.  For example, it would wipe away any automarking code that may be running and that would be annoying!
# Question 1
species_richness <- function(community){
return (length(unique(community)))
# return how many unique numbers(species) there are in the vector(community)
}
# Question 2
init_community_max <- function(size){
return (seq(1,size))
# create vector representing community with maximum species richness
}
# Question 3
init_community_min <- function(size){
return (rep(1,size))
# create vector representing community with minimum species richness
}
# Question 4
choose_two <- function(max_value){
return (sample(max_value, 2, replace = FALSE))
# choose two random indexes within the sequence from 1 to max_value
}
# Question 5
neutral_step <- function(community){
# remove one individual from the community and replace it with the offspring of another
indexes <- choose_two(length(community))
# choose which individual to replace and which individual's offspring to replace it
newcommunity <- community[-(indexes[1])]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, community[indexes[2]], after=(indexes[1]-1))
# replace the old individual with the chosen offspring
community <- newcommunity
# reset the community variables for the next loop
return (community)
}
# Question 6
neutral_generation <- function(community){
if ((length(community)%%2)==0){
stepspergen <- (length(community)/2)
} else {
direction <- sample(c(1,2), 1)
if (direction==1){
stepspergen <- ((length(community)/2)+0.5)
} else {
stepspergen <- ((length(community)/2)-0.5)
}
}
# determined how many steps are within one generation of the community, depends on size of community
# the reason a generation is composed of generation/2 amount of steps is that a generation is the amount of time expected between birth and reproduction, not the time between birth and death, which is longer if generations overlap
# For example, if there are 10 individuals in the system then 5 neutral steps correspond to 5births and 5 deaths, one generation.
for (i in 1:(stepspergen)){
community <- neutral_step(community)
# complete all steps within the generation
}
return(community)
}
# Question 7
neutral_time_series <- function(community,duration)  {
# do a neutral theory simulation and return a time series of species richness in the system
speciesrichness <- c()
speciesrichness <- append(speciesrichness, species_richness(community))
for (i in 1:duration){
# run simulation
community <- neutral_generation(community)
speciesrichness <- append(speciesrichness, species_richness(community))
}
return (speciesrichness)
}
# Question 8
question_8 <- function() {
# answers the following question:
# What state will the system always converge to if you wait long enough? Why is this?
# clear any existing graphs and plot your graph within the R window
graphics.off()
community <- init_community_max(100)
speciesrichness <- neutral_time_series(community, 200)
plot(speciesrichness, type="l", xlab="Generation", ylab="Species Richness", main="Species Richness Over Time")
return("The system will always converge to a species richness of 1. This will happen so long as speciation is 0. This is because the only possibilities are either; species richness stays the same (if when an individual dies, it is replaced by offspring of its' own species), or species richness declines (when an individual dies, it is replaced by an individual of another species). Because there is always a change that species richness will decrease, this means that species richness will decline over time and eventually, the community will consist of only one species.")
}
# Question 9
neutral_step_speciation <- function(community,speciation_rate)  {
# remove one individual from the community and replace it with a new species
random <- runif(1, min = 0, max = 1)
# generate random number between 0 and 1 to determine whether to introduce new species or not
smallestmissing <- function(community){
`%!in%` <- Negate(`%in%`)
for (i in (1:(max(community)+1))){
if (i %!in% community){
return (i)
}
}
}
if (random <= speciation_rate){
index <- sample(length(community), 1)
# choose which individual to replace
newcommunity <- community[-(index)]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, smallestmissing(community), after=((index)-1))
# replace the old individual with the chosen offspring
} else {
indexes <- choose_two(length(community))
# choose which individual to replace and which individual's offspring to replace it
newcommunity <- community[-(indexes[1])]
# remove (kill off) the chosen individual from the community
newcommunity <- append(newcommunity, community[indexes[2]], after=(indexes[1]-1))
# replace the old individual with the chosen offspring
}
community <- newcommunity
return (community)
}
# Question 10
neutral_generation_speciation <- function(community,speciation_rate)  {
if ((length(community)%%2)==0){
stepspergen <- (length(community)/2)
} else {
direction <- sample(c(1,2), 1)
if (direction==1){
stepspergen <- ((length(community)/2)+0.5)
} else {
stepspergen <- ((length(community)/2)-0.5)
}
}
# determined how many steps are within one generation of the community, depends on size of community
# the reason a generation is composed of generation/2 amount of steps is that a generation is the amount of time expected between birth and reproduction, not the time between birth and death, which is longer if generations overlap
# For example, if there are 10 individuals in the system then 5 neutral steps correspond to 5births and 5 deaths, one generation.
for (i in 1:(stepspergen)){
community <- neutral_step_speciation(community, speciation_rate)
# complete all steps within the generation
}
return(community)
}
# Question 11
neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
# do a neutral theory simulation and return a time series of species richness in the system
speciesrichness <- c()
speciesrichness <- append(speciesrichness, species_richness(community))
for (i in 1:duration){
# run simulation
community <- neutral_generation_speciation(community, speciation_rate)
speciesrichness <- append(speciesrichness, species_richness(community))
}
return (speciesrichness)
}
# Question 12
question_12 <- function()  {
# answers the following question:
# Explain what you found from this plot about the effect of initial conditions.
# Why does the neutral model simulation give you those particular results?”
graphics.off()
community1 <- init_community_max(100)
community2 <- init_community_min(100)
speciesrichness1 <- neutral_time_series_speciation(community1, 0.1, 200)
speciesrichness2 <- neutral_time_series_speciation(community2, 0.1, 200)
plot(speciesrichness1, type="l", col="green", xlab="Generation", ylab="Species Richness", main="Species Richness Over Time")
lines(speciesrichness2, type="l", col="orange")
legend("topright", legend=c("init_community_max", "init_community_min"), fill =c("green", "orange"))
return("In this model, there are two aspects being specified in the initial conditions. The first is the community. This model shows two situations at the extremes of species richness within the community. This plot shows that the initial species richness of a community has little to no effect on species richness, as eventually species richness will reach a dynamic equilibrium (determined by speciation), regardless of the species richness of the initial population. This also means that the size of the community has no effect on the eventual species richness of the community. The second is speciation, which is what determines how species richness behaves over time for a community. The speciation rate set for a community determines the level at which the species richness will eventually come to a dynamic equilibrium around. The higher the speciation rate, the higher the eventual species richness dynamic equilibrium of that community. Without speciation, Species richness will converge to 1 regardless of initial species richness. Both a community with maximal initial species richness, and one with minimal initial species richness, will reach the same dynamic equilibrium after a few generations, if they have the same speciation rate. ")
}
# Question 13
species_abundance <- function(community)  {
return (sort((as.data.frame(table(community)))$Freq, decreasing=TRUE))
# turns community into frequency table to obtain frequencies, then data frame so that only frequencies can be accessed
# then sorts in decreasing numerical order
}
# Question 14
octaves <- function(abundance_vector) {
# determine how many bins there will be for this vector
numbins <- ceiling(log(max(abundance_vector))/log(2))
# create the bin slots (eg 1,2,4,8,16)
bins <- c(1)
for (i in (2:(numbins+1))){
bins <- append(bins, bins[i-1]*2)
}
# create output vector
output <- rep(0, numbins)
for (x in 1:length(abundance_vector)){
for (y in 1:length(bins)){
if ((abundance_vector[x] < bins[y]) && (abundance_vector[x] >= bins[y-1])){
output[y-1] = output[y-1]+1
}
}
}
return (output)
}
# Question 15
sum_vect <- function(x, y) {
# fill the shorter vector with zeros
maxlength <- max(c(length(x), length(y)))
if (length(x) > length(y)){
diff <- length(x) - length(y)
y = append(y, rep(0, diff))
}else{
diff <- length(y) - length(x)
x = append(x, rep(0, diff))
}
# add the vectors
summedvects <- x + y
return (summedvects)
}
# Question 16
question_16 <- function()  {
graphics.off()
communitysize <- 100
# create community
community1 <- init_community_max(communitysize)
community2 <- init_community_min(communitysize)
# run for first 200 generations
speciation_rate <- 0.1
for (i in 1:200){
community1 <- neutral_generation_speciation(community1, speciation_rate)
community2 <- neutral_generation_speciation(community2, speciation_rate)
}
# produce octave vector after first 200 generations
oct_vect1 <- octaves(species_abundance(community1))
oct_vect2 <- octaves(species_abundance(community2))
# run 2000 more generations but stop to record octave vector every 20 generations
for (i in 1:100){
for (i in 1:20){
community1 <- neutral_generation_speciation(community1, speciation_rate)
community2 <- neutral_generation_speciation(community2, speciation_rate)
}
oct_vect1 <- sum_vect(oct_vect1, octaves(species_abundance(community1)))
oct_vect2 <- sum_vect(oct_vect2, octaves(species_abundance(community2)))
}
# create mean
oct_vect_mean1 <- oct_vect1/101
oct_vect_mean2 <- oct_vect2/101
# create bar names for first community
largest_oct_vect_length <- max(length(oct_vect_mean1), length(oct_vect_mean2))
#check which community is largest
binstartingvals <- c(1)
for (i in (2:largest_oct_vect_length)){
binstartingvals <- append(binstartingvals, binstartingvals[i-1]*2)
}
binnames <- c()
for (i in (1:largest_oct_vect_length)){
binnames <- append(binnames, paste(binstartingvals[i], "≤ x <", 2*binstartingvals[i]))
}
# work out ylim
allvalues <- append(oct_vect_mean1, oct_vect_mean2)
limit <- max(allvalues)
# put groups into table
mydf1 <-t(oct_vect_mean1)
mydf2 <-t(oct_vect_mean2)
mydf <- rbind(mydf1, mydf2)
mymatrix <- as.matrix(mydf)
# overlaying barplots
barplot(mymatrix, beside = TRUE, names.arg=binnames, main= "Mean Species Abundance Distribution", xlab = "Species Abundance (Individuals per species)", ylab = "Frequency (number of species)", ylim = c(0,(limit)*1.1), xpd = FALSE, col = c("palegreen", "orchid"), border = c("palegreen4", "orchid4"), width = 2)
# barplot(oct_vect_mean2, names.arg=binnames2, xpd = FALSE, col = "orchid", border = "orchid4", add=TRUE, width = 1, space = c(1.5, rep(2, length(binnames2)-1)))
legend("topright", legend=c("Initial maximal species richness", "Initial minimal species richness"), fill =c("palegreen", "orchid"))
return ("The initial size of a community does not influence the pattern of frequency within each species abundance octave class, but frequency does increase as community increases. The number of individuals in a community influences the abundance of species with only one individual. An observed pattern is that the number of species with only one individual is usually around 10% of the community size.  A pattern is also seen in species abundance in that the lower species abundance is, the more species there are with that species abundance.
The initial speciation rate has a demonstrable effect on species abundance. Species rate seems to determine the distribution of species abundances. The higher the speciation rate, the higher the species diversity and therefore the individuals are distributed amongst more species, meaning species abundances are lower. The higher speciation rate gets, the more right skewed species abundance gets. The speciation rate determines the percentage of species that contain only one individual. For example, if speciation rate is 0.1, 10% of the species abundances will be 1. Therefore 10% of the community will be in their own unique species. Increasing speciation rate eradicates the higher species abundances. So speciation rate also affects the upper limit of species abundance.
The initial species richness has litle to no effect on eventual species abundance, especially after 2200 generations. Both species abundances displayed the same patterns at the same frequencies when in the same initial conditions.")
}
cluster_run(speciation_rate = 0.1, size=100, wall_time=10, interval_rich=1, interval_oct=10, burn_in_generations=200, output_file_name="my_test_file_1.rda")
exit
q()
get_my_seed <- function(username=kg21,year=2021,min=0.002,max=0.007,sigfig=5) {
# set seed with a hash of username and year
seed_from_hash <- digest::digest2int(paste(username,year))
set.seed(seed_from_hash)
# generate speciation rate based on uniform distribution between min and max
speciation_rate <- signif(runif(1)*(max-min)+min,sigfig)
return(speciation_rate)
}
personal_speciation_rate <- get_my_seed(username)
username = kg21
username = "kg21"
personal_speciation_rate <- get_my_seed(username)
print(personal_speciation_rate)
personal_speciation_rate <- get_my_seed(username)
print(personal_speciation_rate)
setwd("~/Documents/CMEECoursework/StatsGLM")
d <- read.table("Sparrowsize.txt", header=TRUE)
ls
pwd
pwd()
getwd()
d <- read.table("Sparrowsize.txt", header=TRUE)
rm(list=ls())
rm(list=ls())
d <- read.table("SparrowSize.txt", header=TRUE)
str(d)
names(d)
head(d)
hist(d$Tarsus, main="", xlab="Sparrow tarsus length (mm)", col="grey")
mean(d$Tarsus, na.rm = TRUE)
var(d$Tarsus, na.rm = TRUE)
sd(d$Tarsus, na.rm = TRUE)
hist(d$Tarsus, main="", xlab="Sparrow tarsus length (mm)", col="grey", prob = TRUE) # this argument tells R to plot density instead of frequency, as seen on y axis
lines(density(d$Tarsus, na.rm=TRUE), lwd = 2)
lines(density(d$Tarsus, na.rm=TRUE), lwd = 2) # density plot -  lwd is line width
abline(v = mean(d$Tarsus, na.rm = TRUE), col="red", lwd  = 2)
abline(v = mean(d$Tarsus, na.rm = TRUE)-sd(d$Tarsus, na.rm=TRUE), col="blue", lwd=2, lty=5) # lty stands for line types
abline(v = mean(d$Tarsus, na.rm = TRUE)+sd(d$Tarsus, na.rm=TRUE), col="blue", lwd=2, lty=5) # lty stands for line types
## Checking whether the two peaks are sexual dimorphism
t.test(d$Tarsus~d$Sex)
hist(d$Tarsus[d$Sex==1], main="", xlab="Male sparrow tarsus length (mm)", col = "grey", prob=TRUE)
lines(density(d$Tarsus[d$Sex==1], na.rm = TRUE), lwd = 2)
abline(v = mean(d$Tarsus[d$Sex==1], na.rm=TRUE), col="red", lwd = 2)
abline(v = mean(d$Tarsus[d$Sex==1], na.rm = TRUE)-sd(d$Tarsus[d$Sex==1], na.rm = TRUE), col="blue", lwd = 2, lty = 5)
abline(v = mean(d$Tarsus[d$Sex==1], na.rm = TRUE)+sd(d$Tarsus[d$Sex==1], na.rm = TRUE), col="blue", lwd = 2, lty = 5)
hist(d$Tarsus[d$Sex==0], main="", xlab="Female sparrow tarsus length (mm)", col = "grey", prob=TRUE)
lines(density(d$Tarsus[d$Sex==0], na.rm = TRUE), lwd = 2)
abline(v = mean(d$Tarsus[d$Sex==0], na.rm=TRUE), col="red", lwd = 2)
abline(v = mean(d$Tarsus[d$Sex==0], na.rm = TRUE)-sd(d$Tarsus[d$Sex==1], na.rm = TRUE), col="blue", lwd = 2, lty = 5)
abline(v = mean(d$Tarsus[d$Sex==0], na.rm = TRUE)+sd(d$Tarsus[d$Sex==1], na.rm = TRUE), col="blue", lwd = 2, lty = 5)
dev.off()
par(mfrow=c(2,1)) # creates multi-panelled plot
hist(d$Tarsus[d$Sex==1], main="", xlab="Male sparrow tarsus length (mm)", col = "grey", prob=TRUE)
lines(density(d$Tarsus[d$Sex==1], na.rm = TRUE), lwd = 2)
abline(v = mean(d$Tarsus[d$Sex==1], na.rm=TRUE), col="red", lwd = 2)
abline(v = mean(d$Tarsus[d$Sex==1], na.rm = TRUE)-sd(d$Tarsus[d$Sex==1], na.rm = TRUE), col="blue", lwd = 2, lty = 5)
abline(v = mean(d$Tarsus[d$Sex==1], na.rm = TRUE)+sd(d$Tarsus[d$Sex==1], na.rm = TRUE), col="blue", lwd = 2, lty = 5)
hist(d$Tarsus[d$Sex==0], main="", xlab="Female sparrow tarsus length (mm)", col = "grey", prob=TRUE)
lines(density(d$Tarsus[d$Sex==0], na.rm = TRUE), lwd = 2)
abline(v = mean(d$Tarsus[d$Sex==0], na.rm=TRUE), col="red", lwd = 2)
abline(v = mean(d$Tarsus[d$Sex==0], na.rm = TRUE)-sd(d$Tarsus[d$Sex==1], na.rm = TRUE), col="blue", lwd = 2, lty = 5)
abline(v = mean(d$Tarsus[d$Sex==0], na.rm = TRUE)+sd(d$Tarsus[d$Sex==1], na.rm = TRUE), col="blue", lwd = 2, lty = 5)
## Variance
var(d$Tarsus, na.rm=TRUE)
sd(d$Tarsus, na.rm=TRUE)
sd(d$Tarsus, na.rm=TRUE)^2
sqrt(var(d$Tarsus, na.rm=TRUE))
d1 <- subset(d, d$Tarsus!="NA")
d1 <- subset(d1, d1$Wing!="NA")
sumz <- var(d1$Tarsus)+var(d1$Wing)
test <- var(d1$Tarsus+d1$Wing)
sumz
test
dev.off()
plot(jitter(d1$Wing), d1$Tarsus, pch=19, cex=0.4)
## Checking other rule of var(A+B)=var(A)+var(B)+2COV(A,B)
cov(d1$Tarsus, d1$Sex)
## Checking other rule of var(A+B)=var(A)+var(B)+2COV(A,B)
cov(d1$Tarsus, d1$Wing)
sumz <- var(d1$Tarsus)+var(d1$Wing)+2*cov(d1$Tarsus, d1$Wing)
test <- var(d1$Tarsus+d1$Wing)
sumz
test
## Checking whether data follows rule 2
var(d1$Tarsus*10)
var(d1$Tarsus)*10^2
## Linear models
## testing hypothesis that heavier unicorns have larger horns
uni <- read.table("RUnicorns.txt", header=T)
str(uni)
head(uni)
mean(uni$Bodymass)
sd(uni$Bodymass)
var(uni$Bodymass)
hist(uni$Bodymass)
mean(uni$Hornlength)
sd(uni$Hornlength)
var(uni$Hornlength)
hist(uni$Hornlength)
plot(uni$Bodymass~uni$Hornlength, pch=19, xlab="Unicorn horn length", ylab="Unicorn body mass", col="blue")
mod <- lm(uni$Bodymass~uni$Hornlength)
abline(mod, col="red")
res <- signif(rediduals(mod), 5)
pre <- predict(mod)
res <- signif(residuals(mod), 5)
pre <- predict(mod)
segments(uni$Hornlength, uni$Bodymass, uni$Hornlength, pre, col="black")
hist(uni$Bodymass)
hist(uni$Hornlength)
hist(uni$Height)
cor.test(uni$Hornlength, uni$Height)
boxplot(uni$Bodymass~uni$Gender)
par(mfrow=c(2,1))
boxplot(uni$Bodymass~uni$Pregnant)
plot(uni$Hornlength[uni$Pregnant==0], uni$Bodymass[uni$Pregnant==0], pch=19, xlab="Horn length", ylab="Body mass", xlim=c(2,10), ylim=c(6,19))
points(uni$Hornlength[uni$Pregnant==1], uni$Bodymass[uni$Pregnant==1], pch=19, col="red")
dev.off()
boxplot(uni$Bodymass~uni$Pregnant)
plot(uni$Hornlength[uni$Gender=="Female"], uni$Bodymass[uni$Gender=="Female"],pch=19,xlab="Horn length",ylab="Body Mass",xlim=c(2,10),ylim=c(6,19))
points(uni$Hornlength[uni$Gender=="Male"],uni$Bodymass[uni$Gender="Male"],pch=19,col="red")
points(uni$Hornlength[uni$Gender=="Male"],uni$Bodymass[uni$Gender=="Male"],pch=19,col="red")
points(uni$Hornlength[uni$Gender=="Undecided"],uni$Bodymass[uni$Gender=="Undecided"],pch=19,col="green")
boxplot(uni$Bodymass~uni$Glizz)
plot(uni$Hornlength[uni$Glizz==1],uni$Bodymass[uni$Glizz==1],pch=19,col="red")
dev.off()
boxplot(uni$Bodymass~uni$Pregnant)
plot(uni$Hornlength[uni$Gender=="Female"], uni$Bodymass[uni$Gender=="Female"],pch=19,xlab="Horn length",ylab="Body Mass",xlim=c(2,10),ylim=c(6,19))
points(uni$Hornlength[uni$Gender=="Male"],uni$Bodymass[uni$Gender=="Male"],pch=19,col="red")
points(uni$Hornlength[uni$Gender=="Undecided"],uni$Bodymass[uni$Gender=="Undecided"],pch=19,col="green")
boxplot(uni$Bodymass~uni$Glizz)
plot(uni$Hornlength[uni$Glizz==0],uni$Bodymass[uni$Glizz==0],pch=19,xlab="Horn length", ylab="Body mass", xlim=c(2,10), ylim=c(6,19))
points(uni$Hornlength[uni$Glizz==1],uni$Bodymass[uni$Glizz==1],pch=19,col="red")
#include all above realized affecting factors in model (gender, pregnancy, glizz)
FullModel <- lm(uni$Bodymass~uni$Hornlength+uni$Gender+uni$Pregnant+uni$Glizz)
summary(FullModel)
#Try excluding pregnant unicorns
u1 <- subset(uni, uni$Pregnant==0)
FullModel <- lm(u1$Bodymass~u1$Hornlength+u1$Gender+u1$Glizz)
summary(FullModel)
ReducedModel <- lm(u1$Bodymass~u1$Hornlength+u1$Glizz)
summary(ReducedModel)
plot(u1$Hornlength[u1$Glizz==0], u1$Bodymass[u1$Glizz==0], pch=19, xlab="Horn length", ylab="Body mass", xlim=c(2,10), ylim=c(6,19))
points(u1$Hornlength[u1$Glizz==1], u1$Bodymass[u1$Glizz=1], pch=19, col="red")
points(u1$Hornlength[u1$Glizz==1], u1$Bodymass[u1$Glizz==1], pch=19, col="red")
abline(ReducedModel)
# Maybe it would be better if plot without glizz
ModForPlot <- lm(u1$Bodymass~u1$Hornlength)
summary(ModForPlot)
plot(u1$Hornlength[u1$Glizz==0], u1$Bodymass[u1$Glizz==0], pch=19, xlab="Horn length", ylab="Body mass", xlim=c(2,10), ylim=c(6,19))
plot(u1$Hornlength[u1$Glizz==0], u1$Bodymass[u1$Glizz==0], pch=19, xlab="Horn length", ylab="Body mass", xlim=c(2,10), ylim=c(6,19))
points(u1$Hornlength[u1$Glizz==1], u1$Bodymass[u1$Glizz==1], pch=19, col="red")
abline(ModForPlot)
# Checking additive rule for variances
boxplot(u1$Hornlength~u1$Glizz)
t.test(u1$Hornlength~u1$Glizz)
# Check model for violations of assumptions
# we already know of one: that horn length and glizz are independent
plot(ReducedModel)
# Check model for violations of assumptions
# we already know of one: that horn length and glizz are independent
plot(ReducedModel)
# Checking additive rule for variances
boxplot(u1$Hornlength~u1$Glizz)
t.test(u1$Hornlength~u1$Glizz)
# Check model for violations of assumptions
# we already know of one: that horn length and glizz are independent
plot(ReducedModel)
View(u1)
plot(u1$Hornlength[u1$Glizz==0],u1$Bodymass[u1$Glizz==0], pch=19, xlab="Horn length", ylab="Body Mass", xlim=c(3,8), ylim=c(6,15))
plot(u1$Hornlength[u1$Glizz==0],u1$Bodymass[u1$Glizz==0], pch=19, xlab="Horn length", ylab="Body Mass", xlim=c(3,8), ylim=c(6,15))
points(u1$Hornlength[u1$Glizz==1], u1$Bodymass[u1$Glizz==1], pch=19, col="red")
abline(ReducedModel)
# Linear models - interpretation of interactions - three-level fixed factor and continuous variable
rm(list=ls())
d<- read.table("Three-way-Unicorn.txt", header=TRUE)
str(d)
names(D)
names(d)
head(d)
plot(d$HornLength~d$Bodymass)
dev.off()
plot(d$HornLength[d$Gender==0],d$Bodymass[d$Gender==0],pch=19)
plot(d$HornLength[d$Gender==0],d$Bodymass[d$Gender==0],pch=19,xlim=c(0,50), ylim=c(70,100))
plot(d$HornLength[d$Gender==0],d$Bodymass[d$Gender==0],pch=19,xlim=c(0,50), ylim=c(0,100))
points(d$HornLength[d$Gender==1],d$Bodymass[d$Gender==1],pch=19, col="red")
plot(uni$Hornlength[uni$Pregnant==0], uni$Bodymass[uni$Pregnant==0], pch=19, xlab="Horn length", ylab="Body mass", xlim=c(2,10), ylim=c(6,19))
## Linear models
## testing hypothesis that heavier unicorns have larger horns
uni <- read.table("RUnicorns.txt", header=T)
plot(uni$Hornlength[uni$Pregnant==0], uni$Bodymass[uni$Pregnant==0], pch=19, xlab="Horn length", ylab="Body mass", xlim=c(2,10), ylim=c(6,19))
plot(d$HornLength[d$Gender==0],d$Bodymass[d$Gender==0],pch=19,xlim=c(0,15), ylim=c(80,100))
plot(d$HornLength[d$Gender==0],d$Bodymass[d$Gender==0],pch=19, col="black",xlim=c(0,15), ylim=c(80,100))
points(d$HornLength[d$Gender==1],d$Bodymass[d$Gender==1],pch=19, col="red")
mean(d$Bodymass)
sd(d$Bodymass)
var(d$Bodymass)
par(mfrow=c(2,1))
hist(d$Bodymass, main="")
hist(d$Bodymass, main="")
mean(d$HornLength)
sd(d$HornLength)
var(d$HornLength)
hist(d$HornLength,  main="")
plot(d$HornLength~d$Bodymass)
plot(d$Bodymass~d$HornLength)
dev.off()
plot(d$Bodymass~d$HornLength)
plot(d$Bodymass[d$Gender=="male"],d$HornLength[d$Gender=="male"],pch=19, col="black",xlim=c(0,15), ylim=c(80,100))
plot(d$HornLength[d$Gender=="male"],d$Bodymass[d$Gender=="male"],pch=19, col="black",xlim=c(0,15), ylim=c(80,100))
points(d$HornLength[d$Gender=="female"],d$Bodymass[d$Gender=="female"],pch=19, col="red")
dev.off(())
dev.off()
plot(d$HornLength[d$Gender=="male"]~d$Bodymass[d$Gender=="male"],pch=19, col="black",xlim=c(0,15), ylim=c(80,100))
points(d$HornLength[d$Gender=="female"],d$Bodymass[d$Gender=="female"],pch=19, col="red")
dev.off()
plot(d$HornLength[d$Gender=="male"]~d$Bodymass[d$Gender=="male"],pch=19, col="black",xlim=c(0,15), ylim=c(80,100))
plot(d$HornLength[d$Gender=="male"]~d$Bodymass[d$Gender=="male"],pch=19, col="black",xlim=c(70,1), ylim=c(0,18))
plot(d$HornLength[d$Gender=="male"]~d$Bodymass[d$Gender=="male"],pch=19, col="black",xlim=c(70,1), ylim=c(0,18))
plot(d$HornLength[d$Gender=="male"]~d$Bodymass[d$Gender=="male"],pch=19, col="black",xlim=c(70,100), ylim=c(0,18))
points(d$HornLength[d$Gender=="female"],d$Bodymass[d$Gender=="female"],pch=19, col="red")
plot(d$HornLength[d$Gender=="male"]~d$Bodymass[d$Gender=="male"],pch=19, col="black",xlim=c(70,100), ylim=c(0,18), xlab="Bodymass(kg)", ylab="Hornlength(cm)")
points(d$HornLength[d$Gender=="female"],d$Bodymass[d$Gender=="female"],pch=19, col="red")
points(d$Bodymass[d$Gender=="female"],d$HornLength[d$Gender=="female"],pch=19, col="red")
points(d$Bodymass[d$Gender=="not_sure"],d$HornLength[d$Gender=="not_sure"],pch=19, col="green")
mod <- lm(d$Bodymass~d$HornLength+d$Gender)
summary(mod)
mod <- lm(formula=Hornlength ~ Gender * Bodymass, data=d)
mod <- lm(formula=Hornlength ~ Gender * Bodymass, data=d)
mod <- lm(formula=HornLength ~ Gender * Bodymass, data=d)
summary(mod)
mod <- lm(formula=HornLength ~ Bodymass * Gender, data=d)
summary(mod)
