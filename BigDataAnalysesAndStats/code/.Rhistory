freq_a2<-length(which(data[,i]==alleles[2]))/nrow(data)
# stores same result for allele 2
### determine minor allele ###
minor_allele <- alleles[which.min(c(freq_a1, freq_a2))]
# stores letter of which allele is the minor one
freq_minor_allele <- c(freq_a1, freq_a2)[which.min(c(freq_a1, freq_a2))]
# stores relative frequency of the minor allele
cat(" the minor allele is",minor_allele ,"and the minor allele frequency (MAF) is", freq_minor_allele)
# prints minor allele to terminal
### store frequencies ###
frequencies <- c(frequencies, freq_minor_allele)
}
### calculate allele frequencies for each snp ###
frequencies<- c()
### alleles in this snp ###
alleles <- unique(data[,i])
# stores info in variable so each letter can be accessed
cat("\nSNP", i, "with alleles", alleles)
# prints alleles in snp
### frequencies of the alleles ###
freq_a1<-length(which(data[,i]==alleles[1]))/nrow(data)
# stores relative frequency of allele 1 in variable
freq_a2<-length(which(data[,i]==alleles[2]))/nrow(data)
# stores same result for allele 2
### determine minor allele ###
minor_allele <- alleles[which.min(c(freq_a1, freq_a2))]
# stores letter of which allele is the minor one
freq_minor_allele <- c(freq_a1, freq_a2)[which.min(c(freq_a1, freq_a2))]
# stores relative frequency of the minor allele
cat(" the minor allele is",minor_allele ,"and the minor allele frequency (MAF) is", freq_minor_allele)
# prints minor allele to terminal
### store frequencies ###
frequencies <- c(frequencies, freq_minor_allele)
}
code bearsNOTES.R
for (i in 1:ncol(data)){
### alleles in this snp ###
alleles <- unique(data[,i])
# stores info in variable so each letter can be accessed
cat("\nSNP", i, "with alleles", alleles)
# prints alleles in snp
### frequencies of the alleles ###
freq_a1<-length(which(data[,i]==alleles[1]))/nrow(data)
# stores relative frequency of allele 1 in variable
freq_a2<-length(which(data[,i]==alleles[2]))/nrow(data)
# stores same result for allele 2
### determine minor allele ###
minor_allele <- alleles[which.min(c(freq_a1, freq_a2))]
# stores letter of which allele is the minor one
freq_minor_allele <- c(freq_a1, freq_a2)[which.min(c(freq_a1, freq_a2))]
# stores relative frequency of the minor allele
cat(" the minor allele is",minor_allele ,"and the minor allele frequency (MAF) is", freq_minor_allele)
# prints minor allele to terminal
### store frequencies ###
frequencies <- c(frequencies, freq_minor_allele)
}
### plot histogram ###
hist(frequencies)
### plot frequencies ###
plot(frequencies, type="h")
### HOW TO PERFORM FOR EVERY SNP ###
frequencies<- c()
for (i in 1:ncol(data)){
### genotypes in this snp ###
genotypes <- split(data[,i], ceiling(seq_along(data[,i])/2))
# stores info in variable so each letter can be accessed
cat("\nSNP", i, "with alleles", alleles)
# prints alleles in snp
### frequencies of the alleles ###
freq_a1<-length(which(data[,i]==alleles[1]))/nrow(data)
# stores relative frequency of allele 1 in variable
freq_a2<-length(which(data[,i]==alleles[2]))/nrow(data)
# stores same result for allele 2
### determine minor allele ###
minor_allele <- alleles[which.min(c(freq_a1, freq_a2))]
# stores letter of which allele is the minor one
freq_minor_allele <- c(freq_a1, freq_a2)[which.min(c(freq_a1, freq_a2))]
# stores relative frequency of the minor allele
cat(" the minor allele is",minor_allele ,"and the minor allele frequency (MAF) is", freq_minor_allele)
# prints minor allele to terminal
### store frequencies ###
frequencies <- c(frequencies, freq_minor_allele)
}
genotype_counts <- c(0, 0, 0)
nsamples <- 20
### accessing (looping through) genotype for individuals ###
j<- 1
## Example for column 1 ##
## state that we are examining individual 1
j <- 1
### creating index numbers for accessing the genotype, not directly accessing
# eg for individual 1, create numbers 1 and 2 to access those rows
# and for individual 2, create numbers 3 and 4 to access those rows
haplotype_index <- c( (j*2)-1, (j*2) )
### count the minor allele instances
data(haplotype_index[,1])
### count the minor allele instances
data[haplotype_index,1]
alleles <- unique(data[,1])
cat("\nSNP", i, "with alleles", alleles)
freq_a1<-length(which(data[,1]==alleles[1]))/nrow(data)
freq_a2<-length(which(data[,1]==alleles[2]))/nrow(data)
minor_allele <- alleles[which.min(c(freq_a1, freq_a2))]
### the minor allele ###
minor_allele <- alleles[which.min(c(freq_a1, freq_a2))]
# minor allele = least frequent
# alternative allele = most frequent
# determines and stores which allele is least frequenct (eg "C")
freq_minor_allele <- c(freq_a1, freq_a2)[which.min(c(freq_a1, freq_a2))]
cat(" the minor allele is",minor_allele ,"and the minor allele frequency (MAF) is", freq_minor_allele)
# creating index numbers for accessing the genotype, not directly accessing
# eg for individual 1, create numbers 1 and 2 to access those rows
haplotype_index <- c( (j*2)-1, (j*2) )
# count the minor allele instances
data[haplotype_index,1]
# count the minor allele instances
data[haplotype_index,1]
which(data(haplotype_index[,1]==minor_allele))
# produces the genotype for the individual (eg "A" "A")
data(haplotype_index[,1]==minor_allele
genotype <- length(which(data(haplotype_index[,1]==minor_allele)))
# [,1] determines first column and haplotype_index determines which rows
### increase the counter for the corresponding genotype
genotype_counts[genotype_index] <- genotype_counts[genotype_index]+1
}
###############################
### genotype frequencies ###
genotype_counts <- c(0, 0, 0)
# will store the count for amount of genotypes that store 0 versions of the alternative allele, 1 version of the alternative allele, and 2 versions of the alterntive allele
# For example in this case (# of CC, # of AC/CA, # of AA)
# genotypes (eg AA, CA, AC, CC) will be counted by occurences of the alternative allele (eg A)
# because the two alleles add to 1, we only need to count frequency of one allele (eg A) and we can work out the genotype frequencies
nsamples <- 20
# number of individuals
# remember there are two rows of code for every individual
# one row represents each chromosome
# individual inherits two genes for any one characteristic
# two rows are needed to represent these two genes for any one individual
### accessing (looping through) genotype for individuals ###
## Example for column 1 ##
## state that we are examining individual 1
j <- 1
### creating index numbers for accessing the genotype, not directly accessing
# eg for individual 1, create numbers 1 and 2 to access those rows
# and for individual 2, create numbers 3 and 4 to access those rows
haplotype_index <- c( (j*2)-1, (j*2) )
# haplotype index will store the rows in which that individuals' information is
# for each individual passed to the for loop, this line identifies which rows to analyse for its genetic information in 'data'
### count the minor allele instances
data[haplotype_index,1]
# produces the genotype for the individual (eg "A" "A")
genotype <- length(which(data(haplotype_index[,1]==minor_allele)))
# [,1] determines first column and haplotype_index determines which rows
### increase the counter for the corresponding genotype
genotype_counts[genotype_index] <- genotype_counts[genotype_index]+1
}
###############################
for (j in 1:nsamples){
### creating index numbers for accessing the genotype, not directly accessing
# eg for individual 1, create numbers 1 and 2 to access those rows
# and for individual 2, create numbers 3 and 4 to access those rows
haplotype_index <- c( (j*2)-1, (j*2) )
# haplotype index will store the rows in which that individuals' information is
# for each individual passed to the for loop, this line identifies which rows to analyse for its genetic information in 'data'
### count the minor allele instances
genotype <- length(which(data(haplotype_index[,1]==minor_allele)))
# [,1] determines first column and haplotype_index determines which rows
### increase the counter for the corresponding genotype
genotype_counts[genotype_index] <- genotype_counts[genotype_index]+1
}
## testing
i <- data[,1]
genotypes <- split(data[,i], ceiling(seq_along(data[,i])/2))
# split rows up into pairs of alleles to make up genotype for each bear
for (i in genotypes){
genotypes[i]<- paste(unlist(genotypes[i]), collapse='')
}
genotypey<- paste(unlist(genotypes), collapse='')
genotypex <- unique(genotypes)
# store list of different genotypes so can be referenced
length(which(genotypes==genotypex[1]))
# returns count of genotypex[1]
# can't do as trying to compare list to list
#####################################
########### QUESTION 4 ##############
#####################################
# calculate (observed) homozygosity and heterozygosity for each SNP
# calculate expected genotype counts for each SNP and test for HWE
# calculate, print and visualise inbreeding coefficient for each SNP deviating from HWE
### refine dataset to only polymorphic sites ###
polydata <- data.frame(c(data$V30, data$V40))# doesnt work
View(polydata)
col1 <- data$V30
col2 <- data$V40
polydata <- data.frame(col1, col2)
polydata %>% rename(Column30=col1, Column40=col2)
# produces the genotype for the individual (eg "A" "A")
data(haplotype_index[,1]==minor_allele)
# produces the genotype for the individual (eg "A" "A")
which(data(haplotype_index[,1]==minor_allele))
# produces the genotype for the individual (eg "A" "A")
data[haplotype_index,1]==minor_allele
# produces TRUE/FALSE for if either allele is the same as the minor allele (eg FALSE FALSE)
which(data[haplotype_index,1]==minor_allele)
# produces the amount of TRUE's in the above statement (eg 0)
# this is also the amount of the minor allele in this individual
length(which(data[haplotype_index,1]==minor_allele)))
# produces the amount of TRUE's in the above statement (eg 0)
# this is also the amount of the minor allele in this individual
length(which(data[haplotype_index,1]==minor_allele))
# produces TRUE/FALSE for if either allele is the same as the minor allele (eg FALSE FALSE)
x <-which(data[haplotype_index,1]==minor_allele)
type(x)
class(x)
# produces integer of the amount of TRUE's in the above statement (eg 0)
# x is empty
# this is also the amount of the minor allele in this individual
y <- length(which(data[haplotype_index,1]==minor_allele))
class(y)
y
x
# count the allele instances
data[haplotype_index,1]
# produces the genotype for the individual (eg "A" "A")
# [,1] determines first column and haplotype_index determines which rows
data[haplotype_index,1]==minor_allele
# produces TRUE/FALSE for if either allele is the same as the minor allele (eg FALSE FALSE)
which(data[haplotype_index,1]==minor_allele)
# counts the amount of TRUE's in the above statement (eg 0)
# product is empty
# this is also the amount of the minor allele in this individual
length(which(data[haplotype_index,1]==minor_allele))
# adding length means that the integer 0 is produces and the answer isnt empty (eg 0)
genotype <- length(which(data[haplotype_index,1]==minor_allele))
data
View(data)
MySample <- rnorm(10, m=0, sd=1)
### clear workspace ###
rm(list=ls())
MySample <- rnorm(10, m=0, sd=1)
MySample
hist(MySample)
dnorm(-1, m=0, sd=1)
# produce histogram
dnorm(1, m=0, sd=1)
# probability of getting a value of -1
# from a normally distributed random number with mean=0 and sd=1
dnorm(10, m=0, sd=1)
# probability of getting a value as large as 10
dnorm(100, m=0, sd=1)
MySample5 <- rnorm(5, m=0, sd=1)
MySample10 <- rnorm(10, m=0, sd=1)
MySample20 <- rnorm(20, m=0, sd=1)
MySample40 <- rnorm(40, m=0, sd=1)
MySample80 <- rnorm(80, m=0, sd=1)
MySample160 <- rnorm(160, m=0, sd=1)
# visualize these samples
par(mfcol = c(2,3))
# initialize multi-panelled plot
par(mfg = c(1,1)); hist(MySample5, col = rgb(1,1,0), main = 'n=5')
par(mfg = c(1,2)); hist(MySample10, col = rgb(1,1,0), main = 'n = 10')
par(mfg = c(1,3)); hist(MySample20, col = rgb(1,1,0), main = 'n = 20')
par(mfg = c(2,1)); hist(MySample40, col = rgb(1,1,0), main = 'n = 40')
par(mfg = c(2,2)); hist(MySample80, col = rgb(1,1,0), main = 'n = 80')
par(mfg = c(2,3)); hist(MySample160, col = rgb(1,1,0), main = 'n = 160')
# visualize these samples
par(mfcol = c(2,3))
# initialize multi-panelled plot
par(mfg = c(1,1)); hist(MySample5, col = rgb(1,1,0), main = 'n=5')
par("mar")
par(mar=c(1,1,1,1))
# initialize multi-panelled plot
par(mfg = c(1,1)); hist(MySample5, col = rgb(1,1,0), main = 'n=5')
par(mfg = c(1,2)); hist(MySample10, col = rgb(1,1,0), main = 'n = 10')
# visualize these samples
par(mfcol = c(2,3))
# initialize multi-panelled plot
par(mfg = c(1,1)); hist(MySample5, col = rgb(1,1,0), main = 'n=5')
### clear workspace ###
rm(list=ls())
# visualize these samples
par(mfcol = c(2,3))
# initialize multi-panelled plot
par(mfg = c(1,1)); hist(MySample5, col = rgb(1,1,0), main = 'n=5')
# draw samples of various sizes
MySample5 <- rnorm(5, m=0, sd=1)
MySample10 <- rnorm(10, m=0, sd=1)
MySample20 <- rnorm(20, m=0, sd=1)
MySample40 <- rnorm(40, m=0, sd=1)
MySample80 <- rnorm(80, m=0, sd=1)
MySample160 <- rnorm(160, m=0, sd=1)
# visualize these samples
par(mfcol = c(2,3))
# initialize multi-panelled plot
par(mfg = c(1,1)); hist(MySample5, col = rgb(1,1,0), main = 'n=5')
par(mfg = c(1,2)); hist(MySample10, col = rgb(1,1,0), main = 'n = 10')
par(mfg = c(1,3)); hist(MySample20, col = rgb(1,1,0), main = 'n = 20')
par(mfg = c(2,1)); hist(MySample40, col = rgb(1,1,0), main = 'n = 40')
par(mfg = c(2,2)); hist(MySample80, col = rgb(1,1,0), main = 'n = 80')
par(mfg = c(2,3)); hist(MySample160, col = rgb(1,1,0), main = 'n = 160')
par(mar=c(1,1,1,1))
# draw samples of various sizes
MySample5 <- rnorm(5, m=0, sd=1)
MySample10 <- rnorm(10, m=0, sd=1)
MySample20 <- rnorm(20, m=0, sd=1)
MySample40 <- rnorm(40, m=0, sd=1)
MySample80 <- rnorm(80, m=0, sd=1)
MySample160 <- rnorm(160, m=0, sd=1)
# visualize these samples
par(mfcol = c(2,3))
# initialize multi-panelled plot
par(mfg = c(1,1)); hist(MySample5, col = rgb(1,1,0), main = 'n=5')
par(mfg = c(1,2)); hist(MySample10, col = rgb(1,1,0), main = 'n = 10')
par(mfg = c(1,3)); hist(MySample20, col = rgb(1,1,0), main = 'n = 20')
par(mfg = c(2,1)); hist(MySample40, col = rgb(1,1,0), main = 'n = 40')
par(mfg = c(2,2)); hist(MySample80, col = rgb(1,1,0), main = 'n = 80')
par(mfg = c(2,3)); hist(MySample160, col = rgb(1,1,0), main = 'n = 160')
par(mar=c(1,1,1,1))
rm(list=ls())
setwd("~/Documents/CMEECoursework/BigDataAnalysesAndStats/code")
######################## (1) ##########################
# LOAD THE DATA FROM THE CSV TEXT FILE INTO A DATA FRAME:
genome <- read.csv('../data/GenomeSize.csv', , stringsAsFactors = T) #assumes that you are working from your Code directory
head(genome)
str(genome) # Check what the data columns contain
tapply(genome$BodyWeight, genome$Suborder, mean) # take a quick mean
tapply(genome$BodyWeight, genome$Suborder, mean, na.rm=TRUE)
# you can add na.rm=TRUE into most functions to avoid this problem
tapply(genome$BodyWeight, genome$Suborder, length)
tapply(genome$BodyWeight, genome$Suborder, var, na.rm=TRUE)
#You can also remove NA's by subsetting (using weight as an example):
BodyWt_no_NA <- subset(genome, !is.na(BodyWeight))
str(BodyWt_no_NA)
summary(genome) #Note that each column gets a separate summary!
hist(genome$GenomeSize, breaks=10)
par(mar=c(1,1,1,1))
hist(genome$GenomeSize, breaks=10)
#Note that each column gets a separate summary!
# also shows number of NA's for each column
######################## (4) ##########################
# VISUALISE THE DISTRIBUTION OF THE SAMPLES OF YOUR FOCAL VARIABLE:
par(mar=c(2,2,2,2))
hist(genome$GenomeSize, breaks=10)
rm(list=ls())
######################## (1) ##########################
# LOAD THE DATA FROM THE CSV TEXT FILE INTO A DATA FRAME:
genome <- read.csv('../data/GenomeSize.csv', , stringsAsFactors = T) #assumes that you are working from your Code directory
tapply(genome$BodyWeight, genome$Suborder, mean)
#You can also remove NA's by subsetting (using weight as an example):
BodyWt_no_NA <- subset(genome, !is.na(BodyWeight))
hist(genome$GenomeSize, breaks=10)
hist(genome$GenomeSize, breaks=10)
hist(genome$GenomeSize, breaks=10)
# breaks determines how many bins (bars) there are on the chart
plot(density(genome$GenomeSize, bw=0.1))
hist(genome$GenomeSize, breaks=5)
hist(genome$GenomeSize, breaks=20)
hist(genome$GenomeSize, breaks=15)
hist(genome$GenomeSize, breaks=15)
hist(genome$GenomeSize, breaks=10)
# breaks determines how many bins (bars) there are on the chart
plot(density(genome$GenomeSize, bw=0.5))
# breaks determines how many bins (bars) there are on the chart
plot(density(genome$GenomeSize, bw=1))
# breaks determines how many bins (bars) there are on the chart
plot(density(genome$GenomeSize, bw=10))
# breaks determines how many bins (bars) there are on the chart
plot(density(genome$GenomeSize, bw=0.1))
summary(genome)
# total length
hist(genome$TotalLength, breaks=10)
# breaks determines how many bins (bars) there are on the chart
plot(density(genome$TotalLength, bw=0.1))
# breaks determines how many bins (bars) there are on the chart
plot(density(genome$TotalLength, bw=0.1))
# breaks determines how many bins (bars) there are on the chart
plot(density(genome$TotalLength, bw=0.1, na.rm=TRUE))
# total length
hist(genome$TotalLength, breaks=10, na.rm=TRUE)
# total length
hist(genome$TotalLength, breaks=10)
# total length
hist(genome$TotalLength, breaks=10)
# breaks determines how many bins (bars) there are on the chart
plot(density(genome$TotalLength, bw=0.1, na.rm=TRUE))
# breaks determines how many bins (bars) there are on the chart
plot(density(genome$TotalLength, bw=5, na.rm=TRUE))
plot(GenomeSize ~ Suborder, data=genome)
# total length
plot(TotalSize ~ Suborder, data=genome)
# total length
plot(TotalLength ~ Suborder, data=genome)
# First, get two small datasets, one for each order
Anisoptera <- subset(genome, Suborder=='Anisoptera') #The dragonflies
# Now plot the first suborder and add a line for the second, adjusting
# x and y axis limits to accommodate both curves
plot(density(Zygoptera$GenomeSize), xlim=c(0.1, 2.7), ylim=c(0,1.7))
Zygoptera <- subset(genome, Suborder=='Zygoptera') #The damselflies
ls()
str(Anisoptera)
# Now plot the first suborder and add a line for the second, adjusting
# x and y axis limits to accommodate both curves
plot(density(Zygoptera$GenomeSize), xlim=c(0.1, 2.7), ylim=c(0,1.7))
# draws the plot for damselflies
lines(density(Anisoptera$GenomeSize), col='red')
# adds a line for dragonflies
# total length
# Now plot the first suborder and add a line for the second, adjusting
# x and y axis limits to accommodate both curves
plot(density(Zygoptera$TotalLength), xlim=c(0.1, 2.7), ylim=c(0,1.7))
# draws the plot for damselflies
lines(density(Anisoptera$TotalLength), col='red')
# adds a line for dragonflies
# total length
# Now plot the first suborder and add a line for the second, adjusting
# x and y axis limits to accommodate both curves
plot(density(Zygoptera$TotalLength), xlim=c(0, 100), ylim=c(0,0.08))
# draws the plot for damselflies
lines(density(Anisoptera$TotalLength), col='red')
# draws the plot for damselflies
lines(density(Anisoptera$TotalLength), col='red', na.rm=TRUE)
# draws the plot for damselflies
lines(density(Anisoptera$TotalLength, na.rm=TRUE), col='red')
hist(genome$TotalLength) #Check the distribution of your new variable of interest
plot(GenomeSize ~ TotalLength, data = genome) #Now plot
plot(GenomeSize ~ BodyWeight, data = genome) #Another example, using weight instead
str(genome$Suborder) #Confirm that there are two levels under suborders
myColours <- c('red', 'blue') # So choose two colours
mySymbols <- c(1,3) # And two different markers
plot(GenomeSize ~ TotalLength , data = genome, #Now plot again
col = myColours[Suborder], pch = mySymbols[Suborder],
xlab='Total length (mm)', ylab='Genome size (pg)')
legend(40,2, legend=levels(genome$Suborder), #Add legend at coordinate 40,2
col= myColours, pch = mySymbols)
plot(GenomeSize ~ TotalLength , data = genome, #Now plot again
col = myColours[Suborder], pch = mySymbols[Suborder],
xlab='Total length (mm)', ylab='Genome size (pg)')
legend(40,2, legend=levels(genome$Suborder), #Add legend at coordinate 40,2
col= myColours, pch = mySymbols)
legend("topleft", legend=levels(genome$Suborder), #Add legend at coordinate 40,2
col= myColours, pch = mySymbols)
plot(GenomeSize ~ TotalLength , data = genome, #Now plot again
col = myColours[Suborder], pch = mySymbols[Suborder],
xlab='Total length (mm)', ylab='Genome size (pg)')
legend("topleft", legend=levels(genome$Suborder), #Add legend at coordinate 40,2
col= myColours, pch = mySymbols)
legend("topleft", legend=levels(genome$Suborder), #Add legend at topleft
col= myColours, pch = mySymbols, cex=1)
colours()
myColours <- c('chartreuse', 'darkorange') # So choose two colours
plot(GenomeSize ~ TotalLength , data = genome, #Now plot again
col = myColours[Suborder], pch = mySymbols[Suborder],
xlab='Total length (mm)', ylab='Genome size (pg)')
legend("topleft", legend=levels(genome$Suborder), #Add legend at topleft
col= myColours, pch = mySymbols, cex=1)
mySymbols <- c(11, 8) # And two different markers
plot(GenomeSize ~ TotalLength , data = genome, #Now plot again
col = myColours[Suborder], pch = mySymbols[Suborder],
xlab='Total length (mm)', ylab='Genome size (pg)')
legend("topleft", legend=levels(genome$Suborder), #Add legend at topleft
col= myColours, pch = mySymbols, cex=1)
pdf('../results/GenomeSize.pdf', height=5, width=6) #Open the pdf file
plot(GenomeSize ~ TotalLength , data = genome,
col=myColours[Suborder], pch=mySymbols[Suborder],
xlab='Total length (mm)', ylab='Genome size (pg)')
legend(40,2, legend=levels(genome$Suborder),
col= myColours, pch = mySymbols)
dev.off() #Close the pdf file
mySymbols <- c(11, 18) # And two different markers
plot(GenomeSize ~ TotalLength , data = genome, #Now plot again
col = myColours[Suborder], pch = mySymbols[Suborder],
xlab='Total length (mm)', ylab='Genome size (pg)')
legend("topleft", legend=levels(genome$Suborder), #Add legend at topleft
col= myColours, pch = mySymbols, cex=1)
mySymbols <- c(18, 8) # And two different markers
plot(GenomeSize ~ TotalLength , data = genome, #Now plot again
col = myColours[Suborder], pch = mySymbols[Suborder],
xlab='Total length (mm)', ylab='Genome size (pg)')
legend("topleft", legend=levels(genome$Suborder), #Add legend at topleft
col= myColours, pch = mySymbols, cex=1)
mySymbols <- c(17, 8) # And two different markers
plot(GenomeSize ~ TotalLength , data = genome, #Now plot again
col = myColours[Suborder], pch = mySymbols[Suborder],
xlab='Total length (mm)', ylab='Genome size (pg)')
legend("topleft", legend=levels(genome$Suborder), #Add legend at topleft
col= myColours, pch = mySymbols, cex=1)
pdf('../results/GenomeSize.pdf', height=5, width=6) #Open the pdf file
plot(GenomeSize ~ TotalLength , data = genome,
col=myColours[Suborder], pch=mySymbols[Suborder],
xlab='Total length (mm)', ylab='Genome size (pg)')
legend(40,2, legend=levels(genome$Suborder),
col= myColours, pch = mySymbols)
dev.off() #Close the pdf file
plot(GenomeSize ~ TotalLength , data = genome,
col=myColours[Suborder], pch=mySymbols[Suborder],
xlab='Total length (mm)', ylab='Genome size (pg)')
legend("topleft", legend=levels(genome$Suborder),
col= myColours, pch = mySymbols)
dev.off() #Close the pdf file
pdf('../results/GenomeSize.pdf', height=5, width=6) #Open the pdf file
plot(GenomeSize ~ TotalLength , data = genome,
col=myColours[Suborder], pch=mySymbols[Suborder],
xlab='Total length (mm)', ylab='Genome size (pg)')
legend("topleft", legend=levels(genome$Suborder),
col= myColours, pch = mySymbols)
dev.off()
rm=list=ls()
rm(list=ls())
source("ExpDesign.R")
source("ExpDesign.R")
load("/home/kayleigh/Documents/CMEECoursework/BigDataAnalysesAndStats/results/GenomeSize.Rda")
q()
