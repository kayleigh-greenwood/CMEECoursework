print(hello)
print("hello!")
setwd("~/CMEECoursework/StatsGLM/Day2")
require(ggplot2)
require(MASS)
require(ggpubr)
fish <- read.csv("fisheries.csv", stringsAsFactors = T)
str(fish)
# investigate whether total abundance changes with mean depth of the water column
# scatterplot
ggplot(fish$MeanDepth, fish$TotAbund)
help("ggplot")
# investigate whether total abundance changes with mean depth of the water column
# scatterplot
ggplot(data=fish, mapping = aes(x=wt, y=mpg))+ geom_point()
# investigate whether total abundance changes with mean depth of the water column
# scatterplot
ggplot(data=fish, mapping = aes(fish$MeanDepth, fish$TotAbund))+ geom_point()
# investigate whether total abundance changes with mean depth of the water column
# scatterplot
ggplot(data=fish, mapping = aes(fish$MeanDepth, fish$TotAbund))+ geom_point(pch = 19)
# investigate whether total abundance changes with mean depth of the water column
# scatterplot
ggplot(data=fish, mapping = aes(MeanDepth, TotAbund))+ geom_point(pch = 19)
# investigate whether total abundance changes with mean depth of the water column
# scatterplot
ggplot(data=fish, mapping = aes(MeanDepth, TotAbund))+ geom_point()
# investigate whether total abundance changes with mean depth of the water column
# scatterplot
ggplot(data=fish, mapping = aes(x=MeanDepth, y=TotAbund))+ geom_point()+labs(x = "Mean Depth of Water (km)", y="Total Species Abundance")
# investigate whether total abundance changes with mean depth of the water column
# scatterplot
ggplot(data=fish, mapping = aes(x=MeanDepth, y=TotAbund))+ geom_point()+labs(x = "Mean Depth (km)", y="Total Abundance")
# investigate whether total abundance changes with mean depth of the water column
# scatterplot
ggplot(data=fish, mapping = aes(x=MeanDepth, y=TotAbund))+ geom_point()+labs(x = "Mean Depth (km)", y="Total Abundance")+theme_classic()
# fitting the model: total abundance as response and mean depth as explanatory
# model equation: ln(TotAbund) = B0 + B1*MeanDepth
model1 <- glm(formula = fish$TotAbund~fish$MeanDepth, family="poisson")
summary(model1)
# model validation process
# step 1: examine diagnostic plots
par(mfrow=c(2,2))
plot(model1)
# Check how many outliers there are outside of a cooks distance of 1
sum(cooks.distance(model1)>1)
15770/144
# explore adding period as a covariate
boxplot(fish$TotAbund~fish$Period)
help(scatterplot)
scatterplot(x=fish$Period, y=fish$TotAbund)
scatterplot<- ggplot(data=fish, mapping = aes(x=Period, y=TotAbund))+ geom_point()+labs(x = "Time Period", y="Total Abundance")+theme_classic()
scatterplot
scatterplot<- ggplot(data=fish, mapping = aes(x=MeanDepth, y=TotAbund, color=factor(Period)))+ geom_point()+labs(x = "Time Period", y="Total Abundance")+theme_classic()
scatterplot
scatterplot<- ggplot(data=fish, mapping = aes(x=MeanDepth, y=TotAbund, color=factor(Period)))+ geom_point()+labs(x = "Mean Depth", y="Total Abundance")+theme_classic()+scale_color_discrete(name="Period", labels=c("1979-1989", "1997-2002"))
scatterplot
boxplot <- ggplot(data=fish, aes(x=factor(Period, labels=c("1979-1989", "1997-2002")), y=TotAbund))
boxplot
boxplot <- ggplot(data=fish, aes(x=factor(Period, labels=c("1979-1989", "1997-2002")), y=TotAbund))+geom_boxplot()+theme_classic()+labs(x="Period", y="Total Abundance")
boxplot
ggarrange(scatterplot, boxplot, labels=c("A", "B"), ncol=1, nrow=2)
#adding period as a fixed factor and interact it with MeanDepth
plot(fish$MeanDepth[fish$Period==0], fish$TotAbund[fish$Period==0])
#adding period as a fixed factor and interact it with MeanDepth
plot(fish$MeanDepth[fish$Period==0], fish$TotAbund[fish$Period==0], xlim=c(0,5), ylim=c(0,1000))
dev.off()
#adding period as a fixed factor and interact it with MeanDepth
plot(fish$MeanDepth[fish$Period==0], fish$TotAbund[fish$Period==0], xlim=c(0,5), ylim=c(0,1000))
#adding period as a fixed factor and interact it with MeanDepth
model2 <- glm(formula = fish$TotAbund~fish$MeanDepth*fish$Period, family="poisson")
summary(model2)
#alt format:
model2 <- glm(TotAbund ~ MeanDepth*factor(Period), data=fish, family="Poisson")
#alt format:
model2 <- glm(TotAbund ~ MeanDepth*factor(Period), data=fish, family="poisson")
summary(model2)
anova(model2, test="Chisq")
1-(27779-14293)
# Fitting negative binomial model
model3 <- glm.nm(TotAbund ~ MeanDepth*factor(Period), data=fish)
# Fitting negative binomial model
model3 <- glm.nb(TotAbund ~ MeanDepth*factor(Period), data=fish)
summary(model3)
anova(model3, test="Chisq")
# Run reduced model (without the interaction between meandepth and period) before model validation
model4 <- glm.nb(TotAbund ~ MeanDepth+factor(Period), data=fish)
summary(model4)
anova(model4)
anova(model4, test="Chisq")
# fitting the model: total abundance as response and mean depth as explanatory
# model equation: ln(TotAbund) = B0 + B1*MeanDepth
model1 <- glm(formula = fish$TotAbund~fish$MeanDepth, family="poisson")
# model validation process
# step 1: examine diagnostic plots
par(mfrow=c(2,2))
plot(model1)
# examine model diagnostics
par(mfrow=c(2,2))
plot(model1)
# examine model diagnostics
par(mfrow=c(2,2))
plot(model4)
#examine dispersal parameter
158.23/143
# Plotting model
range(fish$MeanDepth)
period1 <- data.frame(MeanDepth=seq(from=0.804, to=4.865, length=100), Period="1")
period2 <- data.frame(MeanDepth=seq(from=0.804, to=4.865, length=100), Period="2")
period1_predictions <- predict(M4, newdata=period1, type="link", se.fit=TRUE) # type=link predicts the fit and se on the log-linear scale
period2_predictions <- predict(M4, newdata=period2, type="link", se.fit=TRUE)
period1$pred <- period1_predictions$fit
period1$se <- period1_predictions$se.fit
period1$upperCI <- period1$pred+(period1$se*1.96)
period1$lowerCI <- period1$pred-(period1$se*1.96)
# Plotting model
range(fish$MeanDepth)
period1 <- data.frame(MeanDepth=seq(from=0.804, to=4.865, length=100), Period="1")
period2 <- data.frame(MeanDepth=seq(from=0.804, to=4.865, length=100), Period="2")
period1_predictions <- predict(M4, newdata=period1, type="link", se.fit=TRUE) # type=link predicts the fit and se on the log-linear scale
period1_predictions <- predict(model4, newdata=period1, type="link", se.fit=TRUE) # type=link predicts the fit and se on the log-linear scale
period2_predictions <- predict(model4, newdata=period2, type="link", se.fit=TRUE)
period1$pred <- period1_predictions$fit
period1$se <- period1_predictions$se.fit
period1$upperCI <- period1$pred+(period1$se*1.96)
period1$lowerCI <- period1$pred-(period1$se*1.96)
period2$pred <- period2_predictions$fit
period2$se <- period2_predictions$se.fit
period2$upperCI <- period2$pred+(period2$se*1.96)
period2$lowerCI <- period2$pred-(period2$se*1.96)
complete <- rbind(period1, period2)
#making the plot
ggplot(complete, aes(x=MeanDepth, y=exp(pred)))+
geom_line(aes(color=factor(Period)))+
geom_ribbon(aes(ymin=exp(lowerCI), ymax=exp(upperCI), fill=factor(Period), alpha=0.3), show.legend=FALSE)+
geom_point(fish, mapping=aes(x=MeanDepth, y=TotAbund, color=factor(Period)))+
labs(y="Total Abundance", x="Mean Depth (km)")+
theme_classic()+
scale_color_discrete(name="Period", labels=c("1979-1989", "1997-2002"))
# Alternative plotting method
require(interactions)
install.packages("interactions")
# Alternative plotting method
require(interactions)
interact_plot(model4, pred=MeanDepth, modx= Period, plot.points = T, data = fish)
# BEE MITES DATA
bees <- read.csv("bee_mites.csv", stringsAsFactors = T)
str(bees)
head(bees)
bees
View(bees)
# investigate whether number of dead mites changes with concentration
ggplot(data=bees, mapping = aes(x=Concentration, y=Dead_mites))+ geom_point()+labs(x = "Concentration", y="Dead mites")+theme_classic()
model1 <- glm(formula = bees$Dead_mites~bees$Concentration, family="poisson")
summary(model1)
# model validation
#step 1: model diagnostic plots
par(mfrow=c(2,2))
plot(model1)
# Residuals vs Fitted: heteroscedaticity / non-linear
# Normal QQ:  light tailed
# Scale-Location: Fine
sum(cooks.distance(model1)>1)
109.25/113
View(bees)
ggplot(data=bees, mapping=aes(x=Concentration, y=Dead_mites, colour=factor(Acaricide))) + geom_point() + theme_classic()
# model 2
model2 <- glm(formula = bees$Dead_mites~bees$Concentration*factor(bees$Acaricide), family="poisson")
summary(model2)
model3 <- glm(formula = bees$Dead_mites~bees$Concentration+factor(bees$Acaricide), family="poisson")
summary(model3)
# ln(Dead_mites) = 0.53 + 0.57 * Concentration
# Pseudo R^2 = 0.295 = model explains 29.5% of data
anova(model1, test="Chisq")
109.25/154.79
109.25/113
range(mites$Concentration)
# BEE MITES DATA
mites <- read.csv("bee_mites.csv", stringsAsFactors = T)
str(mites)
head(mites)
# investigate whether number of dead mites changes with concentration
ggplot(data=mites, mapping = aes(x=Concentration, y=Dead_mites))+ geom_point()+labs(x = "Concentration", y="Dead mites")+theme_classic()
model1 <- glm(formula = mites$Dead_mites~mites$Concentration, family="poisson")
summary(model1)
# ln(Dead_mites) = 0.53 + 0.57 * Concentration
# Pseudo R^2 = 0.295 = model explains 29.5% of data
anova(model1, test="Chisq")
#step 2: model diagnostic plots
par(mfrow=c(2,2))
plot(model1)
# Residuals vs Fitted: heteroscedaticity / non-linear
# Normal QQ:  light tailed
# Scale-Location: Fine
sum(cooks.distance(model1)>1)
range(mites$Concentration)
data1 <- data.frame(Concentration=seq(from=0, to=2.16, length=100), Period="1")
data1 <- data.frame(Concentration=seq(from=0, to=2.16, length=100))
data1_predictions <- predict(model4, newdata=data1, type="link", se.fit=TRUE) # type=link predicts the fit and se on the log-linear scale
predictions <- predict(model1, newdata=data1, type="link", se.fit=TRUE) # type=link predicts the fit and se on the log-linear scale
predictions <- predict(model1, newdata=new_data, type="link", se.fit=TRUE) # type=link predicts the fit and se on the log-linear scale
predictions <- predict(model1, newdata=new_data, type="link", se.fit=TRUE) # type=link predicts the fit and se on the log-linear scale
new_data <- data.frame(Concentration=seq(from=0, to=2.16, length=100))
predictions <- predict(model1, newdata=new_data, type="link", se.fit=TRUE) # type=link predicts the fit and se on the log-linear scale
new_data$pred <- predictions$fit
new_data$se <- predictions$se.fit
new_data$upperCI <- new_data$pred+(new_data$se*1.96)
new_data$lowerCI <- new_data$pred-(new_data$se*1.96)
range(mites$Concentration)
new_data <- data.frame(Concentration=seq(from=0, to=2.16, length=100))
predictions <- predict(model1, newdata=new_data, type="link", se.fit=TRUE) # type=link predicts the fit and se on the log-linear scale
new_data <- data.frame(Concentration=seq(from=0, to=2.16, length=115))
predictions <- predict(model1, newdata=new_data, type="link", se.fit=TRUE) # type=link predicts the fit and se on the log-linear scale
new_data$pred <- predictions$fit
new_data$se <- predictions$se.fit
new_data$upperCI <- new_data$pred+(new_data$se*1.96)
new_data$lowerCI <- new_data$pred-(new_data$se*1.96)
ggplot(new_data, aes(x=Concentration, y=exp(pred)))+
geom_ribbon(aes(ymin=exp(lowerCI), ymax=exp(upperCI), alpha=0.1), show.legend=FALSE, fill="grey")+
theme_classic()
ggplot(new_data, aes(x=Concentration, y=exp(pred)))+
geom_line(col="black")+
geom_ribbon(aes(ymin=exp(lowerCI), ymax=exp(upperCI), alpha=0.1), show.legend=FALSE, fill="grey")+
geom_point(mites, mapping=aes(x=Concentration, y=Dead_mites, color="blue")+
labs(y="Number of Dead Mites", x="Concentration")+
theme_classic()
)
range(mites$Concentration)
new_data <- data.frame(Concentration=seq(from=0, to=2.16, length=115))
predictions <- predict(model1, newdata=new_data, type="link", se.fit=TRUE) # type=link predicts the fit and se on the log-linear scale
new_data$pred <- predictions$fit
new_data$se <- predictions$se.fit
new_data$upperCI <- new_data$pred+(new_data$se*1.96)
new_data$lowerCI <- new_data$pred-(new_data$se*1.96)
ggplot(new_data, aes(x=Concentration, y=exp(pred)))+
geom_line(col="black")+
geom_ribbon(aes(ymin=exp(lowerCI), ymax=exp(upperCI), alpha=0.1), show.legend=FALSE, fill="grey")+
geom_point(mites, mapping=aes(x=Concentration, y=Dead_mites, color="blue"))+
labs(y="Number of Dead Mites", x="Concentration")+
theme_classic()
range(mites$Concentration) # Finding the range of concentration
## [1] 0.00 2.16
new_data <- data.frame(Concentration=seq(from=0, to=2.16, length=100))
predictions<- predict(mites_m1, newdata = new_data, type = "link", se.fit = TRUE) # the type="link" here predicted the fit and se on the log-linear scale.
new_data$pred<- predictions$fit
new_data$se<- predictions$se.fit
new_data$upperCI<- new_data$pred+(new_data$se*1.96)
new_data$lowerCI<- new_data$pred-(new_data$se*1.96)
# Making the Plot
ggplot(new_data, aes(x=Concentration, y=exp(pred)))+
geom_line(col="black")+
geom_ribbon(aes(ymin=exp(lowerCI), ymax=exp(upperCI), alpha=0.1), show.legend = FALSE, fill="grey")+
geom_point(mites, mapping = aes(x=Concentration, y=Dead_mites), col="blue")+
labs(y="Number of Dead Mites", x="Concentration (g/l)")+
theme_classic()
range(mites$Concentration) # Finding the range of concentration
## [1] 0.00 2.16
new_data <- data.frame(Concentration=seq(from=0, to=2.16, length=100))
predictions<- predict(mites_m1, newdata = new_data, type = "link", se.fit = TRUE) # the type="link" here predicted the fit and se on the log-linear scale.
predictions<- predict(model1, newdata = new_data, type = "link", se.fit = TRUE) # the type="link" here predicted the fit and se on the log-linear scale.
## [1] 0.00 2.16
new_data <- data.frame(Concentration=seq(from=0, to=2.16, length=115))
predictions<- predict(model1, newdata = new_data, type = "link", se.fit = TRUE) # the type="link" here predicted the fit and se on the log-linear scale.
new_data$pred<- predictions$fit
new_data$se<- predictions$se.fit
new_data$upperCI<- new_data$pred+(new_data$se*1.96)
new_data$lowerCI<- new_data$pred-(new_data$se*1.96)
# Making the Plot
ggplot(new_data, aes(x=Concentration, y=exp(pred)))+
geom_line(col="black")+
geom_ribbon(aes(ymin=exp(lowerCI), ymax=exp(upperCI), alpha=0.1), show.legend = FALSE, fill="grey")+
geom_point(mites, mapping = aes(x=Concentration, y=Dead_mites), col="blue")+
labs(y="Number of Dead Mites", x="Concentration (g/l)")+
theme_classic()
# BEE MITES DATA
mites <- read.csv("bee_mites.csv", stringsAsFactors = T)
str(mites)
head(mites)
# investigate whether number of dead mites changes with concentration
ggplot(data=mites, mapping = aes(x=Concentration, y=Dead_mites))+ geom_point()+labs(x = "Concentration", y="Dead mites")+theme_classic()
mitemodel1 <- glm(formula = mites$Dead_mites~mites$Concentration, family="poisson")
summary(mitemodel1)
# ln(Dead_mites) = 0.53 + 0.57 * Concentration
# Pseudo R^2 = 0.295 = model explains 29.5% of data
anova(mitemodel1, test="Chisq")
#step 2: model diagnostic plots
par(mfrow=c(2,2))
plot(mitemodel1)
# Residuals vs Fitted: heteroscedaticity / non-linear
# Normal QQ:  light tailed
# Scale-Location: Fine
sum(cooks.distance(mitemodel1)>1)
#examine dispersal parameter
109.25/113 # = 0.97  < 1 so underdispersed
range(mites$Concentration)
new_data <- data.frame(Concentration=seq(from=0, to=2.16, length=115))
predictions <- predict(mitemodel1, newdata=new_data, type="link", se.fit=TRUE) # type=link predicts the fit and se on the log-linear scale
new_data$pred <- predictions$fit
new_data$se <- predictions$se.fit
new_data$upperCI <- new_data$pred+(new_data$se*1.96)
new_data$lowerCI <- new_data$pred-(new_data$se*1.96)
ggplot(new_data, aes(x=Concentration, y=exp(pred)))+
geom_line(col="black")+
geom_ribbon(aes(ymin=exp(lowerCI), ymax=exp(upperCI), alpha=0.1), show.legend=FALSE, fill="grey")+
geom_point(mites, mapping=aes(x=Concentration, y=Dead_mites, color="blue"))+
labs(y="Number of Dead Mites", x="Concentration")+
theme_classic()
mitemodel1 <- glm(Dead_mites~Concentration, data=mites, family="poisson")
summary(mitemodel1)
# ln(Dead_mites) = 0.53 + 0.57 * Concentration
# Pseudo R^2 = 0.295 = model explains 29.5% of data
anova(mitemodel1, test="Chisq")
#step 2: model diagnostic plots
par(mfrow=c(2,2))
plot(mitemodel1)
range(mites$Concentration)
new_data <- data.frame(Concentration=seq(from=0, to=2.16, length=115))
predictions <- predict(mitemodel1, newdata=new_data, type="link", se.fit=TRUE) # type=link predicts the fit and se on the log-linear scale
new_data$pred <- predictions$fit
new_data$se <- predictions$se.fit
new_data$upperCI <- new_data$pred+(new_data$se*1.96)
new_data$lowerCI <- new_data$pred-(new_data$se*1.96)
ggplot(new_data, aes(x=Concentration, y=exp(pred)))+
geom_line(col="black")+
geom_ribbon(aes(ymin=exp(lowerCI), ymax=exp(upperCI), alpha=0.1), show.legend=FALSE, fill="grey")+
geom_point(mites, mapping=aes(x=Concentration, y=Dead_mites, color="blue"))+
labs(y="Number of Dead Mites", x="Concentration")+
theme_classic()
ggplot(new_data, aes(x=Concentration, y=exp(pred)))+
geom_line(col="black")+
geom_ribbon(aes(ymin=exp(lowerCI), ymax=exp(upperCI), alpha=0.1), show.legend=FALSE, fill="grey")+
geom_point(mites, mapping=aes(x=Concentration, y=Dead_mites, color="red"))+
labs(y="Number of Dead Mites", x="Concentration")+
theme_classic()
ggplot(new_data, aes(x=Concentration, y=exp(pred)))+
geom_line(col="black")+
geom_ribbon(aes(ymin=exp(lowerCI), ymax=exp(upperCI), alpha=0.1), show.legend=FALSE, fill="grey")+
geom_point(mites, mapping=aes(x=Concentration, y=Dead_mites, col="blue"))+
labs(y="Number of Dead Mites", x="Concentration")+
theme_classic()
ggplot(new_data, aes(x=Concentration, y=exp(pred)))+
geom_line(col="black")+
geom_ribbon(aes(ymin=exp(lowerCI), ymax=exp(upperCI), alpha=0.1), show.legend=FALSE, fill="grey")+
geom_point(mites, mapping=aes(x=Concentration, y=Dead_mites), col="blue")+
labs(y="Number of Dead Mites", x="Concentration")+
theme_classic()
ggplot(new_data, aes(x=Concentration, y=exp(pred)))+
geom_line(col="black")+
geom_ribbon(aes(ymin=exp(lowerCI), ymax=exp(upperCI), alpha=0.1), show.legend=FALSE, fill="grey")+
geom_point(mites, mapping=aes(x=Concentration, y=Dead_mites), col="blue")+
labs(y="Number of Dead Mites", x="Concentration (g/l)")+
theme_classic()
