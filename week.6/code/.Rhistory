d <- data[,i]
e <- split(d, ceiling(seq_along(d)/2))
f <- as.factor(e)
g <- nlevels(f)
if (levelnum>1){
Location<- c(Location, i)
}
}
f <- as.factor(e)
d <- data[,1]
e <- split(d, ceiling(seq_along(d)/2))
f <- as.factor(e)
# Identify which positions are SNPs (polymorphic, meaning that they have more than one allele)
# SNPs are positions where there are more than one allele
rm(list=ls())
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
# loop to detect exact positions in which there are more than one allele combination
Location <- c()
for (i in 1:10000){
d <- data[,i]
e <- split(d, ceiling(seq_along(d)/2))
f <- as.factor(e)
g <- nlevels(f)
if (g>1){
Location<- c(Location, i)
}
}
for (i in 1:10000){
d <- data[,i]
e <- split(d, ceiling(seq_along(d)/2))
f <- as.factor(e)
g <- as.numeric(nlevels(f))
if (g>1){
Location<- c(Location, i)
}
}
?unique()
# Identify which positions are SNPs (polymorphic, meaning that they have more than one allele)
# SNPs are positions where there are more than one allele
rm(list=ls())
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
snps <- c()
for (i in 1:ncol(data)){
levelnum <- nlevels(as.factor(data[,i]))
if (levelnum==2){
polys <- c(polys, i)
}
}
polys <- vector()
for (i in 1:10000){
row <- as.factor(data[,i])
levelnum <- nlevels(row)
if (levelnum>1){
polys <- c(polys, i)
}
}
# Identify which positions are SNPs (polymorphic, meaning that they have more than one allele)
# SNPs are positions where there are more than one allele
rm(list=ls())
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
snps <- c()
for (i in 1:ncol(data)){
levelnum <- nlevels(as.factor(data[,i]))
if (levelnum==2){
snps <- c(snps, i)
}
}
# Identify which positions are SNPs (polymorphic, meaning that they have more than one allele)
# SNPs are positions where there are more than one allele
rm(list=ls())
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
snps <- c()
for (i in 1:ncol(data)){
if ((nlevels(as.factor(data[,i])))==2){
snps <- c(snps, i)
}
}
# Identify which positions are SNPs (polymorphic, meaning that they have more than one allele)
# SNPs are positions where there are more than one allele
rm(list=ls())
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
snps <- c()
for (i in 1:ncol(data)) {
if (length(unique(data[,i]))==2){
snps <- c(snps, i)
}
}
# Identify which positions are SNPs (polymorphic, meaning that they have more than one allele)
# SNPs are positions where there are more than one allele
rm(list=ls())
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
snps <- c()
snps <- c()
myfunc <- function(v){
if (length(unique(v))==2){
snps <- c(snps, colname(v))
}
Q
c
?
}
myfunc <- function(v){
if (length(unique(v))==2){
snps <- c(snps, colname(v))
}
}
apply(data, 1, myfunc)
?apply
apply(data, 2, myfunc)
### refine dataset to only polymorphic sites ###
polydata <- data.frame(c(data$V30, data$V40))# doesnt work
# Identify which positions are SNPs (polymorphic, meaning that they have more than one allele)
# SNPs are positions where there are more than one allele
rm(list=ls())
?colname
counter <- 1
snps <- c()
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
myfunc <- function(v){
print(counter)
counter <- (counter+1)
# if (length(unique(v))==2){
# snps <- c(snps, colname(v))
# }
}
apply(data, 2, myfunc)
myfunc <- function(v){
snps <- c(snps, counter)
counter<- (counter+1)
# if (length(unique(v))==2){
# snps <- c(snps, colname(v))
# }
}
apply(data, 2, myfunc)
myfunc <- function(v){
snps <- c(snps, counter)
counter<- (counter+1)
return(counter)
# if (length(unique(v))==2){
# snps <- c(snps, colname(v))
# }
}
apply(data, 2, myfunc)
rm(list=ls())
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
snps <- c()
for (i in 1:ncol(data)) {
if (length(unique(data[,i]))==2){
snps <- c(snps, i)
}
}
apply(snps, 1, print)
class(snps)
type(snps)
print(snps)
# attempted to but isn't working
snps <- vector()
rm(list=ls())
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
# the teacher's solution
snps <- vector()
for (i in 1:ncol(data)) {
if (length(unique(data[,i]))==2){
snps <- c(snps, i)
}
}
?class()
typeof(snps)
is.vector(snps)
for (i in snps){
print(data[,i])
}
for (i in snps){
print("new")
print(data[,i])
}
### refine dataset to only polymorphic sites ###
polydata <- data.frame(c(data$V30, data$V40))# doesnt work
for (i in snps){
print()
print(data[,i])
}
for (i in snps){
print(i)
print(data[,i])
}
# using column 30 as example
uniques <- unique(data[,30])
allfreq <- table(data[,30])
allfreq
for (i in snps){
table(data[,i])
}
for (i in snps){
print(table(data[,i]))
}
for (i in snps){
print(paste("Column: ", i, "\n"))
print(table(data[,i]))
}
for (i in snps){
print(paste("Column: ", i))
print(table(data[,i]))
}
for (i in snps){
ColNo<- c(ColNo, i)
AlleleCom<- (AlleleCom, (table(data[,i])))
}
for (i in snps){
ColNo<- c(ColNo, i)
AlleleCom<- c(AlleleCom, (table(data[,i])))
}
# tried putting it in a table/data frame
ColNo<- vector()
AlleleCom<- vector()
for (i in snps){
ColNo<- c(ColNo, i)
AlleleCom<- c(AlleleCom, (table(data[,i])))
}
allfreqs <- data.frame(ColNo, AlleleCom)
allfreqs
View(allfreqs)
rm(list=ls())
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
# tried putting it in a table/data frame
ColNo<- vector()
AlleleCom<- vector()
for (i in snps){
ColNo<- c(ColNo, i)
AlleleCom<- c(AlleleCom, (table(data[,i])))
}
snps <- vector()
for (i in 1:ncol(data)) {
if (length(unique(data[,i]))==2){
snps <- c(snps, i)
}
}
for (i in snps){
ColNo<- c(ColNo, i)
AlleleCom<- c(AlleleCom, (table(data[,i])))
}
allfreqs <- data.frame(ColNo, AlleleCom)
View(allfreqs)
ColNo
rm(list=ls())
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
snps <- vector()
for (i in 1:ncol(data)) {
if (length(unique(data[,i]))==2){
snps <- c(snps, i)
}
}
for (i in snps){
print(paste("Column: ", i))
print(table(data[,i]))
}
for (i in snps){
print(paste("Column: ", i))
print(table(data[,i]))
x <- table(data[,i])
print(x)
}
for (i in snps){
print(paste("Column: ", i))
print(table(data[,i]))
x <- table(data[,i])
print(x[names(a)==A])
}
for (i in snps){
print(paste("Column: ", i))
print(table(data[,i]))
x <- table(data[,i])
# print(x[names(a)==A]) # doesnt work in instances where there is no A
print(x[1])
}
for (i in snps){
print(paste("Column: ", i))
print(table(data[,i]))
x <- table(data[,i])
# print(x[names(a)==A]) # doesnt work in instances where there is no A
print(x[1[1]])
}
for (i in snps){
print(paste("Column: ", i))
print(table(data[,i]))
x <- table(data[,i])
# print(x[names(a)==A]) # doesnt work in instances where there is no A
print(x[1]) # prints one allele and its frequency
y<- x[1]
print(y)
}
for (i in snps){
print(paste("Column: ", i))
print(table(data[,i]))
x <- table(data[,i])
# print(x[names(a)==A]) # doesnt work in instances where there is no A
print(x[1]) # prints one allele and its frequency
y<- x[1]
print(y[1])
}
for (i in snps){
print(paste("Column: ", i))
print(table(data[,i]))
x <- table(data[,i])
# print(x[names(a)==A]) # doesnt work in instances where there is no A
print(x[1]) # prints one allele and its frequency
y<- x[1]
print(y[1])
}
rm(list=ls())
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
data[,1]
unique(data[,1])
for (i in snps){
for (i in snps){
print(paste("Column: ", i))
print(table(data[,i]))
}
snps <- vector()
for (i in 1:ncol(data)) {
if (length(unique(data[,i]))==2){
snps <- c(snps, i)
}
}
for (i in snps){
print(paste("Column: ", i))
print(table(data[,i]))
}
rm(list=ls())
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
rm(list=ls())
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
snps <- vector()
for (i in 1:ncol(data)) {
if (length(unique(data[,i]))==2){
snps <- c(snps, i)
}
}
rm(list=ls())
}
rm(list=ls())
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
snps <- vector()
for (i in 1:ncol(data)) {
if (length(unique(data[,i]))==2){
snps <- c(snps, i)
}
}
for (i in snps){
print(paste("Column: ", i))
print(table(data[,i]))
}
alleles<- unique(data[,1])
alleles
freq_a1<-length(which(data[,1]==alleles[1]))/nrow(data)
freq_a1
freq_a2<-length(which(data[,1]==alleles[2]))/nrow(data)
freq_a2
data <- data[,snps]
unique(data[,1])
data[,1]==alleles[1]
data <- data[,snps]
data <- data[,snps]
rm(list=ls())
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
snps <- vector()
for (i in 1:ncol(data)) {
if (length(unique(data[,i]))==2){
snps <- c(snps, i)
}
}
data <- data[,snps]
data[,1]
unique(data[,1])
alleles <- unique(data[,1])
alleles[1]
alleles[2]
data[,1]==alleles[1]
which(data[,1]==alleles[1])
length(which(data[,1]==alleles[1]))
length(which(data[,1]==alleles[1]))/nrow(data)
freq_a2<-length(which(data[,1]==alleles[2]))/nrow(data)
freq_a1<-length(which(data[,1]==alleles[1]))/nrow(data)
### determine minor allele
minor_allele <- c(freq_a1, freq_a2)[which.min(c(freq_a1, freq_a2))]
### determine minor allele
minor_allele <- alleles[which.min(c(freq_a1, freq_a2))]
for (i in data[,snps]){
### alleles in this snp ###
alleles <- unique(data[,i])
# stores info in variable so each letter can be accessed
cat("\nSNP", i, "with alleles", alleles)
# prints alleles in snp
### frequencies of the alleles ###
freq_a1<-length(which(data[,i]==alleles[1]))/nrow(data)
# stores relative frequency of allele 1 in variable
freq_a2<-length(which(data[,i]==alleles[2]))/nrow(data)
# stores same result for allele 2
### determine minor allele ###
minor_allele <- alleles[which.min(c(freq_a1, freq_a2))]
# stores letter of which allele is the minor one
freq_minor_allele <- c(freq_a1, freq_a2)[which.min(c(freq_a1, freq_a2))]
# stores relative frequency of the minor allele
cat(" the minor allele is",minor_allele ,"and the minor allele frequency (MAF) is", freq_minor_allele)
# prints minor allele to terminal
}
for (i in 1:ncol(data)){
### alleles in this snp ###
alleles <- unique(data[,i])
# stores info in variable so each letter can be accessed
cat("\nSNP", i, "with alleles", alleles)
# prints alleles in snp
### frequencies of the alleles ###
freq_a1<-length(which(data[,i]==alleles[1]))/nrow(data)
# stores relative frequency of allele 1 in variable
freq_a2<-length(which(data[,i]==alleles[2]))/nrow(data)
# stores same result for allele 2
### determine minor allele ###
minor_allele <- alleles[which.min(c(freq_a1, freq_a2))]
# stores letter of which allele is the minor one
freq_minor_allele <- c(freq_a1, freq_a2)[which.min(c(freq_a1, freq_a2))]
# stores relative frequency of the minor allele
cat(" the minor allele is",minor_allele ,"and the minor allele frequency (MAF) is", freq_minor_allele)
# prints minor allele to terminal
}
for (i in 1:ncol(data)){
### alleles in this snp ###
alleles <- unique(data[,i])
# stores info in variable so each letter can be accessed
cat("\nSNP", i, "with alleles", alleles)
# prints alleles in snp
### frequencies of the alleles ###
freq_a1<-length(which(data[,i]==alleles[1]))/nrow(data)
# stores relative frequency of allele 1 in variable
freq_a2<-length(which(data[,i]==alleles[2]))/nrow(data)
# stores same result for allele 2
### determine minor allele ###
minor_allele <- alleles[which.min(c(freq_a1, freq_a2))]
# stores letter of which allele is the minor one
freq_minor_allele <- c(freq_a1, freq_a2)[which.min(c(freq_a1, freq_a2))]
# stores relative frequency of the minor allele
cat(" the minor allele is",minor_allele ,"and the minor allele frequency (MAF) is", freq_minor_allele)
# prints minor allele to terminal
### store frequencies ###
frequencies <- c(frequencies, freq_minor_allele)
}
### HOW TO PERFORM FOR EVERY SNP ###
frequencies<- c()
for (i in 1:ncol(data)){
### alleles in this snp ###
alleles <- unique(data[,i])
# stores info in variable so each letter can be accessed
cat("\nSNP", i, "with alleles", alleles)
# prints alleles in snp
### frequencies of the alleles ###
freq_a1<-length(which(data[,i]==alleles[1]))/nrow(data)
# stores relative frequency of allele 1 in variable
freq_a2<-length(which(data[,i]==alleles[2]))/nrow(data)
# stores same result for allele 2
### determine minor allele ###
minor_allele <- alleles[which.min(c(freq_a1, freq_a2))]
# stores letter of which allele is the minor one
freq_minor_allele <- c(freq_a1, freq_a2)[which.min(c(freq_a1, freq_a2))]
# stores relative frequency of the minor allele
cat(" the minor allele is",minor_allele ,"and the minor allele frequency (MAF) is", freq_minor_allele)
# prints minor allele to terminal
### store frequencies ###
frequencies <- c(frequencies, freq_minor_allele)
}
### plot histogram ###
hist(frequencies)
### plot frequencies ###
plot(frequencies, type="h")
### alleles in this snp ###
i <- data[,1]
genotypes <- split(i, ceiling(seq_along(i)/2))
genotypes
genotypex <- unique(genotypes)
genotypex
length(which(genotypes==alleles[1]))
### refine dataset to only polymorphic sites ###
polydata <- data.frame(c(data$V30, data$V40))# doesnt work
length(which(genotypes==alleles[1]))
genotypes==alleles[1]
alleles[1]
length(which(genotypes==genotypex[1]))
genotypex[1]
class(genotypex[1])
class(genotypes)
class(data[,1])
class(alleles[1])
genotypey<- paste(unlist(genotypes), collapse='')
for (i in genotypes){
genotypes[i]<- paste(unlist(genotypes[i]), collapse='')
}
genotypes
genotype_counts <- c(0, 0, 0)
snps <- vector()
for (i in 1:ncol(data)) {
if (length(unique(data[,i]))==2){
snps <- c(snps, i)
}
}
snps
rm(list=ls())
data<- read.csv("../data/bears.csv",, stringsAsFactors = FALSE, header = FALSE, colClasses=rep("character", 10000))
snps <- vector()
for (i in 1:ncol(data)) {
if (length(unique(data[,i]))==2){
snps <- c(snps, i)
}
}
