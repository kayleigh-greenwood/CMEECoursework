##################################
theme_set(theme_bw())
world <- ne_countries(scale = "medium", returnclass = "sf")
mapdata <- map_data("world")
resultsDFmapping <- tibble::rownames_to_column(resultsDF, "Country") # create new results DF where country is a column so that it can be joined with another df
names(mapdata)[names(mapdata) == 'region'] <- 'Country' # change the name of the countries column to match the other DF
mapdata <- left_join(mapdata, resultsDFmapping, by='Country') # join the data frames
pdf(file="../images/invasivesensitivitymapgradient.pdf")
map <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= corr), colour = "black")
map <- map + scale_fill_gradient2(name="Sensitivity Score", midpoint = 0, mid = "white", high = "darkgoldenrod2", low = "blue4", limits = c(-0.02300198, 0.05477224), space="Lab") # maybe would be better to make all countries below zero on a different colour gradient
# Remove axis titles and details
map <- map + theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank())
map <- map + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.1, 0.25))
map
dev.off()
ggplot(data = resultsDF, mapping = aes(y=corr, x=continent)) +
geom_point() # plot sensitivity score against continent (Scatter)
pdf(file="../images/invasivesensitivityboxplot.pdf")
boxplot(corr ~ continent, data=resultsDF) # plot sensitivity score against continent (boxplot)
dev.off()
sensitivitymodel <- lm(resultsDF$corr ~ resultsDF$continent, weights = 1/(resultsDF$se))
summary(sensitivitymodel)
source("~/CMEECoursework/Project/code/allpressures.R", echo=TRUE)
source("~/CMEECoursework/Project/code/allpressures.R", echo=TRUE)
source("~/CMEECoursework/Project/code/WranglingScripts/wranglebiodiversitydata.R", echo=TRUE)
View(countryBD)
source("~/CMEECoursework/Project/code/WranglingScripts/wranglebiodiversitydata.R", echo=TRUE)
source("~/CMEECoursework/Project/code/WranglingScripts/wranglebiodiversitydata.R", echo=TRUE)
source("~/CMEECoursework/Project/code/AreaBuiltvsBD.R", echo=TRUE)
source("~/CMEECoursework/Project/code/ClimatevsBD.R", echo=TRUE)
source("~/CMEECoursework/Project/code/GHGvsBD.R", echo=TRUE)
source("~/CMEECoursework/Project/code/WranglingScripts/wrangleinvasive.R", echo=TRUE)
source("~/CMEECoursework/Project/code/WranglingScripts/wrangleinvasive.R", echo=TRUE)
source("~/CMEECoursework/Project/code/WranglingScripts/wrangleinvasive.R", echo=TRUE)
source("~/CMEECoursework/Project/code/WranglingScripts/wranglegreenhousedata.R", echo=TRUE)
source("~/CMEECoursework/Project/code/WranglingScripts/wrangleclimatedata.R", echo=TRUE)
source("~/CMEECoursework/Project/code/WranglingScripts/wranglebuiltup.R", echo=TRUE)
source("~/CMEECoursework/Project/code/WranglingScripts/wranglebiodiversitydata.R", echo=TRUE)
View(countryBD)
source("~/CMEECoursework/Project/code/InvasivevsBD.R", echo=TRUE)
source("~/CMEECoursework/Project/code/GHGvsBD.R", echo=TRUE)
source("~/CMEECoursework/Project/code/ClimatevsBD.R", echo=TRUE)
source("~/CMEECoursework/Project/code/AreaBuiltvsBD.R", echo=TRUE)
source("~/CMEECoursework/Project/code/AreaBuiltvsBD.R", echo=TRUE)
source("~/CMEECoursework/Project/code/ClimatevsBD.R", echo=TRUE)
source("~/CMEECoursework/Project/code/GHGvsBD.R", echo=TRUE)
source("~/CMEECoursework/Project/code/InvasivevsBD.R", echo=TRUE)
source("~/CMEECoursework/Project/code/InvasivevsBD.R", echo=TRUE)
source("~/CMEECoursework/Project/code/GHGvsBD.R", echo=TRUE)
source("~/CMEECoursework/Project/code/ClimatevsBD.R", echo=TRUE)
source("~/CMEECoursework/Project/code/AreaBuiltvsBD.R", echo=TRUE)
resultsDF$corr
source("~/CMEECoursework/Project/code/AreaBuiltvsBD.R", echo=TRUE)
resultsDF$corr
resultsDF$continent
View(resultsDF)
summary(sensitivitymodel)
source("~/CMEECoursework/Project/code/AreaBuiltvsBD.R", echo=TRUE)
# base plot
map <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= corr), colour = "black")
dev.off()
dev.off()
# base plot
map <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= corr), colour = "black")
# add colours
map <- map + scale_fill_gradient2(name="Sensitivity Score", midpoint = 0, mid = "white", high = "darkgoldenrod2", low = "blue4", limits = c(-3.222472, 2.756498), space="Lab") # maybe would be better to make all countries below zero on a different colour gradient
# Remove axis titles and details
map <- map + theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank())
map <- map + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.1, 0.25))
map
# base plot
map <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= corr), colour = "black")
dev.off()
dev.off()
# base plot
map <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= corr), colour = "black")
map
mapdata
mapdata <- left_join(mapdata, resultsDFmapping, by='country') # join the data frames
View(mapdata)
theme_set(theme_bw())
world <- ne_countries(scale = "medium", returnclass = "sf")
mapdata <- map_data("world")
View(mapdata)
resultsDFmapping <- tibble::rownames_to_column(resultsDF, "country") # create new results DF where country is a column so that it can be joined with another df
View(resultsDFmapping)
theme_set(theme_bw())
rm(list=ls())
setwd("~/CMEECoursework/Project/code")
library(plotrix) # for std.error
library(graphics) # for boxplot
library(grDevices) # for pdf and dev.off
library(rnaturalearth) # for ne_countries
library(stats) # for lm
library(ggplot2) # for many plotting functions
library(countrycode) # for countrycode
library(dplyr) # for left_join
countryBD <- readRDS("../data/BiodiversityData/WrangledBiodiversityData.RDS")
countryBuilt <- readRDS("../data/LandUseData/WrangledLandUseData.RDS")
#match years of data
countryBD <- countryBD[c(intersect(colnames(countryBD), colnames(countryBuilt)))]
countryBuilt <- countryBuilt[(c(intersect(colnames(countryBD), colnames(countryBuilt))))]
# remove rows with NAs
countryBD <- na.omit(countryBD)
countryBuilt <- na.omit(countryBuilt)
# make sure a country is only included in either table if it is present in both
matchingcountrys <- intersect(countryBD$Country, countryBuilt$Country)
countryBD <- countryBD[countryBD$Country %in% matchingcountrys, ]
countryBuilt <- countryBuilt[countryBuilt$Country %in% matchingcountrys, ]
#create results data frame
resultsDF <- data.frame(matchingcountrys)
#make the countrys the row names
resultsDF$corr <- NA
resultsDF$se <- NA
# loop through countrys and find significant correlation coefficients
for (country in seq_along(matchingcountrys)){
BDvalues <- as.numeric(as.vector(countryBD[country,]))
Builtvalues <- as.numeric(as.vector(countryBuilt[country,]))
# fit model
model <- (lm(BDvalues~Builtvalues))
#add correlation result to results data frame
resultsDF$corr[country] <- as.numeric(model[[1]][2])
resultsDF$se[country] <- as.numeric(sqrt(diag(vcov(model)))[2])
}
#add in continents and regions
resultsDF$continent <- countrycode(sourcevar = resultsDF$matchingcountrys,
origin = "country.name",
destination = "continent")
resultsDF$region <- countrycode(sourcevar = resultsDF$matchingcountrys,
origin = "country.name",
destination = "region")
# add western sahara to north africa
resultsDF[172, "region"] <- "Middle East & North Africa"
for (row in 1:nrow(resultsDF)){
if (resultsDF[row, "region"]=='Latin America & Caribbean'){
resultsDF[row, 4] <- 'S America'
}
}
resultsDF$continent <- replace(resultsDF$continent, resultsDF$continent=='Americas', 'N America')
for (row in 1:nrow(resultsDF)){
if (resultsDF[row, "region"]=='North America'){
resultsDF[row, 4] <- 'N America'
}
}
mean(resultsDF$corr)
std.error(resultsDF$corr)
range(resultsDF$corr)
theme_set(theme_bw())
world <- ne_countries(scale = "medium", returnclass = "sf")
mapdata <- map_data("world")
names(mapdata)[names(mapdata) == 'region'] <- 'country' # change the name of the countries column to match the other DF
rm(list=ls())
setwd("~/CMEECoursework/Project/code")
library(plotrix) # for std.error
library(graphics) # for boxplot
library(grDevices) # for pdf and dev.off
library(rnaturalearth) # for ne_countries
library(stats) # for lm
library(ggplot2) # for many plotting functions
library(countrycode) # for countrycode
library(dplyr) # for left_join
countryBD <- readRDS("../data/BiodiversityData/WrangledBiodiversityData.RDS")
countryBuilt <- readRDS("../data/LandUseData/WrangledLandUseData.RDS")
#match years of data
countryBD <- countryBD[c(intersect(colnames(countryBD), colnames(countryBuilt)))]
countryBuilt <- countryBuilt[(c(intersect(colnames(countryBD), colnames(countryBuilt))))]
# remove rows with NAs
countryBD <- na.omit(countryBD)
countryBuilt <- na.omit(countryBuilt)
# make sure a country is only included in either table if it is present in both
matchingcountrys <- intersect(countryBD$Country, countryBuilt$Country)
countryBD <- countryBD[countryBD$Country %in% matchingcountrys, ]
countryBuilt <- countryBuilt[countryBuilt$Country %in% matchingcountrys, ]
#create results data frame
resultsDF <- data.frame(matchingcountrys)
# adjust column name
colnames(resultsDF)[1] <- "country"
#make the countrys the row names
resultsDF$corr <- NA
resultsDF$se <- NA
# loop through countrys and find significant correlation coefficients
for (country in seq_along(matchingcountrys)){
BDvalues <- as.numeric(as.vector(countryBD[country,]))
Builtvalues <- as.numeric(as.vector(countryBuilt[country,]))
# fit model
model <- (lm(BDvalues~Builtvalues))
#add correlation result to results data frame
resultsDF$corr[country] <- as.numeric(model[[1]][2])
resultsDF$se[country] <- as.numeric(sqrt(diag(vcov(model)))[2])
}
#add in continents and regions
resultsDF$continent <- countrycode(sourcevar = resultsDF$matchingcountrys,
origin = "country.name",
destination = "continent")
#add in continents and regions
resultsDF$continent <- countrycode(sourcevar = resultsDF$country,
origin = "country.name",
destination = "continent")
resultsDF$region <- countrycode(sourcevar = resultsDF$country,
origin = "country.name",
destination = "region")
# add western sahara to north africa
resultsDF[172, "region"] <- "Middle East & North Africa"
for (row in 1:nrow(resultsDF)){
if (resultsDF[row, "region"]=='Latin America & Caribbean'){
resultsDF[row, 4] <- 'S America'
}
}
resultsDF$continent <- replace(resultsDF$continent, resultsDF$continent=='Americas', 'N America')
for (row in 1:nrow(resultsDF)){
if (resultsDF[row, "region"]=='North America'){
resultsDF[row, 4] <- 'N America'
}
}
mean(resultsDF$corr)
std.error(resultsDF$corr)
range(resultsDF$corr)
theme_set(theme_bw())
world <- ne_countries(scale = "medium", returnclass = "sf")
mapdata <- map_data("world")
names(mapdata)[names(mapdata) == 'region'] <- 'country' # change the name of the countries column to match the other DF
mapdata <- left_join(mapdata, resultsDF, by='country') # join the data frames
# base plot
map <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= corr), colour = "black")
map
# add colours
map <- map + scale_fill_gradient2(name="Sensitivity Score", midpoint = 0, mid = "white", high = "darkgoldenrod2", low = "blue4", limits = c(-3.222472, 2.756498), space="Lab") # maybe would be better to make all countries below zero on a different colour gradient
# Remove axis titles and details
map <- map + theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank())
map <- map + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.1, 0.25))
map
source("~/CMEECoursework/Project/code/AreaBuiltvsBD.R", echo=TRUE)
setwd("~/CMEECoursework/Project/code")
rm(list=ls())
library(tidyr) # for pivot_longer
library(dplyr) # for left_join
library(countrycode) # for countrycode
library(plotrix) # for std.error
library(graphics) # for boxplot
library(grDevices) # for pdf
library(stats) # for lm
library(ggplot2) # for various plotting commands
library(rnaturalearth) # for ne_countries
library(tibble) # for rownames_To_column
#read in BD and Invasive data
countryBD <- readRDS("../data/BiodiversityData/WrangledBiodiversityData.RDS")
countryInvasive <- readRDS("../data/InvasiveSpeciesData/WrangledInvasiveSpeciesData.RDS")
#match years of data
matchedyears <- c(intersect(colnames(countryBD), countryInvasive$FirstRecord))
countryInvasive <- subset(countryInvasive, FirstRecord %in% matchedyears)
# remove rows with NAs (might be pointless because i changed the way i match years in this script)
countryBD <- na.omit(countryBD)
countryInvasive <- na.omit(countryInvasive)
# make sure a country is only included in either table if it is present in both
matchingcountrys <- intersect(countryBD$Country, countryInvasive$Country)
countryBD <- countryBD[countryBD$Country %in% matchingcountrys, ]
countryInvasive <- subset(countryInvasive, Country %in% matchingcountrys)
# check countrys matched and above method worked
levels(as.factor(countryInvasive$Country))==countryBD$Country
##################################
## PREPARE AND MERGE DATAFRAMES ##
##################################
#create results data frame
resultsDF <- data.frame(matchingcountrys)
resultsDF$corr <- NA
resultsDF$se <- NA
# pivot BD dataframe longer
countryBD <- pivot_longer(countryBD, -c(Country), values_to = "Biodiversity", names_to = "Year")
colnames(countryInvasive)[2] <- "Year"
# merge data frames into one
alldata <- merge(countryInvasive, countryBD, by=c("Country", "Year"))
###############################
## OBTAIN SENSITIVITY SCORES ##
###############################
# loop through countrys and find significant correlation coefficients
for (countryloop in seq_along(matchingcountrys)){ # this for loop is absolutely fucked and doesn't work
# make subset of dataframe containing only entries from that country
onecountry <- alldata %>% dplyr::filter(Country == matchingcountrys[countryloop])
if (length(levels(as.factor(onecountry$TaxonCount)))>1) {
# fit model
model <- (lm(onecountry$Biodiversity~onecountry$TaxonCount))
#add correlation result to results data frame
resultsDF$corr[countryloop] <- as.numeric(model[[1]][2])
resultsDF$se[countryloop] <- as.numeric(sqrt(diag(vcov(model)))[2])
}
}
#remove NAs
resultsDF <- na.omit(resultsDF)
## remove countries with SE of 0
resultsDF <- subset(resultsDF, se != 0)
# get continents and region
resultsDF$continent <- countrycode(sourcevar = resultsDF$matchingcountrys,
origin = "country.name",
destination = "continent")
resultsDF$region <- countrycode(sourcevar = resultsDF$matchingcountrys,
origin = "country.name",
destination = "region")
# this adds north and south america as 'the americas' so i must separate:
for (row in 1:nrow(resultsDF)){
if (resultsDF[row, 4]=='Latin America & Caribbean'){
resultsDF[row, 3] <- 'S America'
}
}
resultsDF$continent <- replace(resultsDF$continent, resultsDF$continent=='Americas', 'N America')
for (row in 1:nrow(resultsDF)){
if (resultsDF[row, 4]=='North America'){
resultsDF[row, 3] <- 'N America'
}
}
mean(resultsDF$corr)
std.error(resultsDF$corr)
range(resultsDF$corr)
##################################
## VISUALISE SENSITIVITY SCORES ##
##################################
theme_set(theme_bw())
world <- ne_countries(scale = "medium", returnclass = "sf")
mapdata <- map_data("world")
View(onecountry)
View(resultsDF)
setwd("~/CMEECoursework/Project/code")
rm(list=ls())
library(tidyr) # for pivot_longer
library(dplyr) # for left_join
library(countrycode) # for countrycode
library(plotrix) # for std.error
library(graphics) # for boxplot
library(grDevices) # for pdf
library(stats) # for lm
library(ggplot2) # for various plotting commands
library(rnaturalearth) # for ne_countries
library(tibble) # for rownames_To_column
#read in BD and Invasive data
countryBD <- readRDS("../data/BiodiversityData/WrangledBiodiversityData.RDS")
countryInvasive <- readRDS("../data/InvasiveSpeciesData/WrangledInvasiveSpeciesData.RDS")
#match years of data
matchedyears <- c(intersect(colnames(countryBD), countryInvasive$FirstRecord))
countryInvasive <- subset(countryInvasive, FirstRecord %in% matchedyears)
# remove rows with NAs (might be pointless because i changed the way i match years in this script)
countryBD <- na.omit(countryBD)
countryInvasive <- na.omit(countryInvasive)
# make sure a country is only included in either table if it is present in both
matchingcountrys <- intersect(countryBD$Country, countryInvasive$Country)
countryBD <- countryBD[countryBD$Country %in% matchingcountrys, ]
countryInvasive <- subset(countryInvasive, Country %in% matchingcountrys)
# check countrys matched and above method worked
levels(as.factor(countryInvasive$Country))==countryBD$Country
##################################
## PREPARE AND MERGE DATAFRAMES ##
##################################
#create results data frame
resultsDF <- data.frame(matchingcountrys)
colnames(resultsDF)[1] <- "Country"
resultsDF$corr <- NA
resultsDF$se <- NA
# pivot BD dataframe longer
countryBD <- pivot_longer(countryBD, -c(Country), values_to = "Biodiversity", names_to = "Year")
colnames(countryInvasive)[2] <- "Year"
# merge data frames into one
alldata <- merge(countryInvasive, countryBD, by=c("Country", "Year"))
###############################
## OBTAIN SENSITIVITY SCORES ##
###############################
# loop through countrys and find significant correlation coefficients
for (countryloop in seq_along(matchingcountrys)){ # this for loop is absolutely fucked and doesn't work
# make subset of dataframe containing only entries from that country
onecountry <- alldata %>% dplyr::filter(Country == matchingcountrys[countryloop])
if (length(levels(as.factor(onecountry$TaxonCount)))>1) {
# fit model
model <- (lm(onecountry$Biodiversity~onecountry$TaxonCount))
#add correlation result to results data frame
resultsDF$corr[countryloop] <- as.numeric(model[[1]][2])
resultsDF$se[countryloop] <- as.numeric(sqrt(diag(vcov(model)))[2])
}
}
#remove NAs
resultsDF <- na.omit(resultsDF)
## remove countries with SE of 0
resultsDF <- subset(resultsDF, se != 0)
# get continents and region
resultsDF$continent <- countrycode(sourcevar = resultsDF$matchingcountrys,
origin = "country.name",
destination = "continent")
source("~/CMEECoursework/Project/code/InvasivevsBD.R", echo=TRUE)
setwd("~/CMEECoursework/Project/code")
rm(list=ls())
library(tidyr) # for pivot_longer
library(dplyr) # for left_join
library(countrycode) # for countrycode
library(plotrix) # for std.error
library(graphics) # for boxplot
library(grDevices) # for pdf
library(stats) # for lm
library(ggplot2) # for various plotting commands
library(rnaturalearth) # for ne_countries
library(tibble) # for rownames_To_column
#read in BD and Invasive data
countryBD <- readRDS("../data/BiodiversityData/WrangledBiodiversityData.RDS")
countryInvasive <- readRDS("../data/InvasiveSpeciesData/WrangledInvasiveSpeciesData.RDS")
#match years of data
matchedyears <- c(intersect(colnames(countryBD), countryInvasive$FirstRecord))
countryInvasive <- subset(countryInvasive, FirstRecord %in% matchedyears)
# remove rows with NAs (might be pointless because i changed the way i match years in this script)
countryBD <- na.omit(countryBD)
countryInvasive <- na.omit(countryInvasive)
# make sure a country is only included in either table if it is present in both
matchingcountrys <- intersect(countryBD$Country, countryInvasive$Country)
countryBD <- countryBD[countryBD$Country %in% matchingcountrys, ]
countryInvasive <- subset(countryInvasive, Country %in% matchingcountrys)
# check countrys matched and above method worked
levels(as.factor(countryInvasive$Country))==countryBD$Country
##################################
## PREPARE AND MERGE DATAFRAMES ##
##################################
#create results data frame
resultsDF <- data.frame(matchingcountrys)
colnames(resultsDF)[1] <- "Country"
resultsDF$corr <- NA
resultsDF$se <- NA
# pivot BD dataframe longer
countryBD <- pivot_longer(countryBD, -c(Country), values_to = "Biodiversity", names_to = "Year")
colnames(countryInvasive)[2] <- "Year"
# merge data frames into one
alldata <- merge(countryInvasive, countryBD, by=c("Country", "Year"))
###############################
## OBTAIN SENSITIVITY SCORES ##
###############################
# loop through countrys and find significant correlation coefficients
for (countryloop in seq_along(matchingcountrys)){ # this for loop is absolutely fucked and doesn't work
# make subset of dataframe containing only entries from that country
onecountry <- alldata %>% dplyr::filter(Country == matchingcountrys[countryloop])
if (length(levels(as.factor(onecountry$TaxonCount)))>1) {
# fit model
model <- (lm(onecountry$Biodiversity~onecountry$TaxonCount))
#add correlation result to results data frame
resultsDF$corr[countryloop] <- as.numeric(model[[1]][2])
resultsDF$se[countryloop] <- as.numeric(sqrt(diag(vcov(model)))[2])
}
}
#remove NAs
resultsDF <- na.omit(resultsDF)
## remove countries with SE of 0
resultsDF <- subset(resultsDF, se != 0)
# get continents and region
resultsDF$continent <- countrycode(sourcevar = resultsDF$Country,
origin = "country.name",
destination = "continent")
resultsDF$region <- countrycode(sourcevar = resultsDF$Country,
origin = "country.name",
destination = "region")
# this adds north and south america as 'the americas' so i must separate:
for (row in 1:nrow(resultsDF)){
if (resultsDF[row, 4]=='Latin America & Caribbean'){
resultsDF[row, 3] <- 'S America'
}
}
resultsDF$continent <- replace(resultsDF$continent, resultsDF$continent=='Americas', 'N America')
for (row in 1:nrow(resultsDF)){
if (resultsDF[row, 4]=='North America'){
resultsDF[row, 3] <- 'N America'
}
}
mean(resultsDF$corr)
std.error(resultsDF$corr)
range(resultsDF$corr)
##################################
## VISUALISE SENSITIVITY SCORES ##
##################################
theme_set(theme_bw())
world <- ne_countries(scale = "medium", returnclass = "sf")
mapdata <- map_data("world")
View(mapdata)
resultsDFmapping <- tibble::rownames_to_column(resultsDF, "Country") # create new results DF where country is a column so that it can be joined with another df
names(mapdata)[names(mapdata) == 'region'] <- 'Country' # change the name of the countries column to match the other DF
View(mapdata)
mapdata <- left_join(mapdata, resultsDF, by='Country') # join the data frames
map <- ggplot(mapdata, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= corr), colour = "black")
map <- map + scale_fill_gradient2(name="Sensitivity Score", midpoint = 0, mid = "white", high = "darkgoldenrod2", low = "blue4", limits = c(-0.02300198, 0.05477224), space="Lab") # maybe would be better to make all countries below zero on a different colour gradient
# Remove axis titles and details
map <- map + theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank())
map <- map + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = c(0.1, 0.25))
map
source("~/CMEECoursework/Project/code/InvasivevsBD.R", echo=TRUE)
source("~/CMEECoursework/Project/code/WranglingScripts/WrangleBiodiversityData.R", echo=TRUE)
getwd()
