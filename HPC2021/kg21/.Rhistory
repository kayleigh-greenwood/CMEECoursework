}
# Question 27
draw_spiral <- function()  {
# clear any existing graphs and plot your graph within the R window
}
# Question 28
tree <- function(start_position, direction, length)  {
}
draw_tree <- function()  {
# clear any existing graphs and plot your graph within the R window
}
# Question 29
fern <- function(start_position, direction, length)  {
}
draw_fern <- function()  {
# clear any existing graphs and plot your graph within the R window
}
# Question 30
fern2 <- function(start_position, direction, length, dir)  {
}
draw_fern2 <- function()  {
# clear any existing graphs and plot your graph within the R window
}
# Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.
# Challenge question A
Challenge_A <- function() {
# clear any existing graphs and plot your graph within the R window
}
# Challenge question B
Challenge_B <- function() {
# clear any existing graphs and plot your graph within the R window
}
# Challenge question C
Challenge_C <- function() {
# clear any existing graphs and plot your graph within the R window
}
# Challenge question D
Challenge_D <- function() {
# clear any existing graphs and plot your graph within the R window
return("type your written answer here")
}
# Challenge question E
Challenge_E <- function() {
# clear any existing graphs and plot your graph within the R window
return("type your written answer here")
}
# Challenge question F
Challenge_F <- function() {
# clear any existing graphs and plot your graph within the R window
return("type your written answer here")
}
# Challenge question G should be written in a separate file that has no dependencies on any functions here.
question_16()
library(digest)
get_my_seed <- function(username,year=2021,min=0.002,max=0.007,sigfig=5) {
# set seed with a hash of username and year
seed_from_hash <- digest::digest2int(paste(username,year))
set.seed(seed_from_hash)
# generate speciation rate based on uniform distribution between min and max
speciation_rate <- signif(runif(1)*(max-min)+min,sigfig)
return(speciation_rate)
}
personal_speciation_rate <- get_my_seed(username)
print(personal_speciation_rate)
# the seed will be between min and max and have sigfig significant figures
library(digest)
get_my_seed <- function(username,year=2021,min=0.002,max=0.007,sigfig=5) {
# set seed with a hash of username and year
seed_from_hash <- digest::digest2int(paste(username,year))
set.seed(seed_from_hash)
# generate speciation rate based on uniform distribution between min and max
speciation_rate <- signif(runif(1)*(max-min)+min,sigfig)
return(speciation_rate)
}
personal_speciation_rate <- get_my_seed(username)
print(personal_speciation_rate)
rm(list=ls())
graphics.off()
source(file = "kg21_HPC_2021_main.R")
# read in the job number from the cluster:
# iter <-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
# job number for own computer:
iter <- seq(100)
set.seed(iter)
# community sizes : 500,1000,2500,5000
# personal speciation rate: 0.0066439
speciation_rate <- 0.0066439
if (1 <= iter < 26){
size <- 500
} elif (26 <= iter < 51){
size <-1000
} elif {
size <- 2500
} elif {
size <- 5000
}
# set size
if (1 <= iter < 26){
size <- 500
} elif (26 <= iter < 51){
size <-1000
} elif {
size <- 2500
} elif {
size <- 5000
}
}
if (1 <= iter < 26){
size <- 500
} elif (26 <= iter < 51){
size <-1000
} elif {
size <- 2500
} elif {
size <- 5000
}
iter <- 1
iter %% 4
source("~/Documents/CMEECoursework/HPC2021/kg21/clusterrun.R")
iter <- 1
if ((iter %% 4) == 1){
size <- 500
} elif ((iter %% 4) == 2){
size <-1000
} elif ((iter %% 4) == 3){
size <- 2500
} elif ((iter %% 4) == 0){
size <- 5000
}
if (iter %% 4 == 1){
size <- 500
} elif (iter %% 4 == 2){
size <-1000
} elif (iter %% 4 == 3){
size <- 2500
} elif (iter %% 4 == 0){
size <- 5000
}
question_16 <- function()  {
graphics.off()
communitysize <- 100
# create community
community1 <- init_community_max(communitysize)
community2 <- init_community_min(communitysize)
# run for first 200 generations
speciation_rate <- 0.1
for (i in 1:200){
community1 <- neutral_generation_speciation(community1, speciation_rate)
community2 <- neutral_generation_speciation(community2, speciation_rate)
}
# produce octave vector after first 200 generations
oct_vect1 <- octaves(species_abundance(community1))
oct_vect2 <- octaves(species_abundance(community2))
# run 2000 more generations but stop to record octave vector every 20 generations
for (i in 1:100){
for (i in 1:20){
community1 <- neutral_generation_speciation(community1, speciation_rate)
community2 <- neutral_generation_speciation(community2, speciation_rate)
}
oct_vect1 <- sum_vect(oct_vect1, octaves(species_abundance(community1)))
oct_vect2 <- sum_vect(oct_vect2, octaves(species_abundance(community2)))
}
# create mean
oct_vect_mean1 <- oct_vect1/101
oct_vect_mean2 <- oct_vect2/101
# create bar names for first community
largest_oct_vect_length <- max(length(oct_vect_mean1), length(oct_vect_mean2))
#check which community is largest
binstartingvals <- c(1)
for (i in (2:largest_oct_vect_length)){
binstartingvals <- append(binstartingvals, binstartingvals[i-1]*2)
}
binnames <- c()
for (i in (1:largest_oct_vect_length)){
binnames <- append(binnames, paste(binstartingvals[i], "≤ x <", 2*binstartingvals[i]))
}
# work out ylim
allvalues <- append(oct_vect_mean1, oct_vect_mean2)
limit <- max(allvalues)
# put groups into table
groupeddata <- table(oct_vect_mean1, oct_vect_mean2)
#
# overlaying barplots
barplot(groupeddata, names.arg=binnames, main= "Mean Species Abundance Distribution", xlab = "Species Abundance (Individuals per species)", ylab = "Frequency (number of species)", ylim = c(0,(limit)*1.1), xpd = FALSE, col = c("palegreen", "orchid"), border = c("palegreen4", "orchid4"), width = 2)
# barplot(oct_vect_mean2, names.arg=binnames2, xpd = FALSE, col = "orchid", border = "orchid4", add=TRUE, width = 1, space = c(1.5, rep(2, length(binnames2)-1)))
legend("topright", legend=c("Initial maximal species richness", "Initial minimal species richness"), fill =c("palegreen", "orchid"))
return ("The initial size of a community does not influence the pattern of frequency within each species abundance octave class, but frequency does increase as community increases. The number of individuals in a community influences the abundance of species with only one individual. An observed pattern is that the number of species with only one individual is usually around 10% of the community size.  A pattern is also seen in species abundance in that the lower species abundance is, the more species there are with that species abundance.
The initial speciation rate has a demonstrable effect on species abundance. Species rate seems to determine the distribution of species abundances. The higher the speciation rate, the higher the species diversity and therefore the individuals are distributed amongst more species, meaning species abundances are lower. The higher speciation rate gets, the more right skewed species abundance gets. The speciation rate determines the percentage of species that contain only one individual. For example, if speciation rate is 0.1, 10% of the species abundances will be 1. Therefore 10% of the community will be in their own unique species. Increasing speciation rate eradicates the higher species abundances. So speciation rate also affects the upper limit of species abundance.
The initial species richness has litle to no effect on eventual species abundance, especially after 2200 generations. Both species abundances displayed the same patterns at the same frequencies when in the same initial conditions.")
}
question_16()
graphics.off()
communitysize <- 100
# create community
community1 <- init_community_max(communitysize)
community2 <- init_community_min(communitysize)
# run for first 200 generations
speciation_rate <- 0.1
for (i in 1:200){
community1 <- neutral_generation_speciation(community1, speciation_rate)
community2 <- neutral_generation_speciation(community2, speciation_rate)
}
# produce octave vector after first 200 generations
oct_vect1 <- octaves(species_abundance(community1))
oct_vect2 <- octaves(species_abundance(community2))
for (i in 1:100){
for (i in 1:20){
community1 <- neutral_generation_speciation(community1, speciation_rate)
community2 <- neutral_generation_speciation(community2, speciation_rate)
}
oct_vect1 <- sum_vect(oct_vect1, octaves(species_abundance(community1)))
oct_vect2 <- sum_vect(oct_vect2, octaves(species_abundance(community2)))
}
# create mean
oct_vect_mean1 <- oct_vect1/101
oct_vect_mean2 <- oct_vect2/101
largest_oct_vect_length <- max(length(oct_vect_mean1), length(oct_vect_mean2))
binstartingvals <- c(1)
for (i in (2:largest_oct_vect_length)){
binstartingvals <- append(binstartingvals, binstartingvals[i-1]*2)
}
binnames <- c()
for (i in (1:largest_oct_vect_length)){
binnames <- append(binnames, paste(binstartingvals[i], "≤ x <", 2*binstartingvals[i]))
}
# work out ylim
allvalues <- append(oct_vect_mean1, oct_vect_mean2)
limit <- max(allvalues)
# put groups into table
groupeddata <- table(oct_vect_mean1, oct_vect_mean2)
oct_vect_mean1
oct_vect_mean2
groupeddata
# put groups into table
groupeddata <- data.frame(oct_vect_mean1, oct_vect_mean2)
groupeddata
question_16 <- function()  {
graphics.off()
communitysize <- 100
# create community
community1 <- init_community_max(communitysize)
community2 <- init_community_min(communitysize)
# run for first 200 generations
speciation_rate <- 0.1
for (i in 1:200){
community1 <- neutral_generation_speciation(community1, speciation_rate)
community2 <- neutral_generation_speciation(community2, speciation_rate)
}
# produce octave vector after first 200 generations
oct_vect1 <- octaves(species_abundance(community1))
oct_vect2 <- octaves(species_abundance(community2))
# run 2000 more generations but stop to record octave vector every 20 generations
for (i in 1:100){
for (i in 1:20){
community1 <- neutral_generation_speciation(community1, speciation_rate)
community2 <- neutral_generation_speciation(community2, speciation_rate)
}
oct_vect1 <- sum_vect(oct_vect1, octaves(species_abundance(community1)))
oct_vect2 <- sum_vect(oct_vect2, octaves(species_abundance(community2)))
}
# create mean
oct_vect_mean1 <- oct_vect1/101
oct_vect_mean2 <- oct_vect2/101
# create bar names for first community
largest_oct_vect_length <- max(length(oct_vect_mean1), length(oct_vect_mean2))
#check which community is largest
binstartingvals <- c(1)
for (i in (2:largest_oct_vect_length)){
binstartingvals <- append(binstartingvals, binstartingvals[i-1]*2)
}
binnames <- c()
for (i in (1:largest_oct_vect_length)){
binnames <- append(binnames, paste(binstartingvals[i], "≤ x <", 2*binstartingvals[i]))
}
# work out ylim
allvalues <- append(oct_vect_mean1, oct_vect_mean2)
limit <- max(allvalues)
# put groups into table
groupeddata <- data.frame(oct_vect_mean1, oct_vect_mean2)
#
# overlaying barplots
barplot(groupeddata, names.arg=binnames, main= "Mean Species Abundance Distribution", xlab = "Species Abundance (Individuals per species)", ylab = "Frequency (number of species)", ylim = c(0,(limit)*1.1), xpd = FALSE, col = c("palegreen", "orchid"), border = c("palegreen4", "orchid4"), width = 2)
# barplot(oct_vect_mean2, names.arg=binnames2, xpd = FALSE, col = "orchid", border = "orchid4", add=TRUE, width = 1, space = c(1.5, rep(2, length(binnames2)-1)))
legend("topright", legend=c("Initial maximal species richness", "Initial minimal species richness"), fill =c("palegreen", "orchid"))
return ("The initial size of a community does not influence the pattern of frequency within each species abundance octave class, but frequency does increase as community increases. The number of individuals in a community influences the abundance of species with only one individual. An observed pattern is that the number of species with only one individual is usually around 10% of the community size.  A pattern is also seen in species abundance in that the lower species abundance is, the more species there are with that species abundance.
The initial speciation rate has a demonstrable effect on species abundance. Species rate seems to determine the distribution of species abundances. The higher the speciation rate, the higher the species diversity and therefore the individuals are distributed amongst more species, meaning species abundances are lower. The higher speciation rate gets, the more right skewed species abundance gets. The speciation rate determines the percentage of species that contain only one individual. For example, if speciation rate is 0.1, 10% of the species abundances will be 1. Therefore 10% of the community will be in their own unique species. Increasing speciation rate eradicates the higher species abundances. So speciation rate also affects the upper limit of species abundance.
The initial species richness has litle to no effect on eventual species abundance, especially after 2200 generations. Both species abundances displayed the same patterns at the same frequencies when in the same initial conditions.")
}
question_16()
?barplot
# put groups into table
groupeddata <- matrix(oct_vect_mean1, oct_vect_mean2)
# put groups into table
groupeddata <- as.matrix(oct_vect_mean1, oct_vect_mean2)
groupeddata
# put groups into table
groupeddata <- matrix(oct_vect_mean1, oct_vect_mean2)
# put groups into table
groupeddata <- table(oct_vect_mean1, oct_vect_mean2)
groupeddata
# put groups into table
groupeddata <- freq(oct_vect_mean1, oct_vect_mean2)
?table
barplot
?barplot
# put groups into table
groupeddata <- matrix(data = c(oct_vect_mean1, oct_vect_mean2))
groupeddata
# put groups into table
groupeddata <- data.frame(oct_vect_mean1, oct_vect_mean2)
groupeddata
# put groups into table
groupeddata <- table(data.frame(oct_vect_mean1, oct_vect_mean2))
groupeddata
# put groups into table
groupeddata <- matrix(data.frame(oct_vect_mean1, oct_vect_mean2))
groupeddata
# put groups into table
groupeddata <- data.frame(oct_vect_mean1, oct_vect_mean2)
groupeddata
# put groups into table
groupeddata <- table(oct_vect_mean1)
groupeddata
groupeddata
groupeddata
oct_vect_mean1
table(oct_vect_mean1, seq(length(oct_vect_mean1)))
# overlaying barplots
barplot(height = oct_vect_mean1, names.arg=binnames, main= "Mean Species Abundance Distribution", xlab = "Species Abundance (Individuals per species)", ylab = "Frequency (number of species)", ylim = c(0,(limit)*1.1), xpd = FALSE, col = c("palegreen", "orchid"), border = c("palegreen4", "orchid4"), width = 2)
# overlaying barplots
barplot(height = c(oct_vect_mean1, oct_vect_mean2), names.arg=binnames, main= "Mean Species Abundance Distribution", xlab = "Species Abundance (Individuals per species)", ylab = "Frequency (number of species)", ylim = c(0,(limit)*1.1), xpd = FALSE, col = c("palegreen", "orchid"), border = c("palegreen4", "orchid4"), width = 2)
# overlaying barplots
barplot(height = data.frame(oct_vect_mean1, oct_vect_mean2), names.arg=binnames, main= "Mean Species Abundance Distribution", xlab = "Species Abundance (Individuals per species)", ylab = "Frequency (number of species)", ylim = c(0,(limit)*1.1), xpd = FALSE, col = c("palegreen", "orchid"), border = c("palegreen4", "orchid4"), width = 2)
# overlaying barplots
barplot(height = table(oct_vect_mean1, oct_vect_mean2), names.arg=binnames, main= "Mean Species Abundance Distribution", xlab = "Species Abundance (Individuals per species)", ylab = "Frequency (number of species)", ylim = c(0,(limit)*1.1), xpd = FALSE, col = c("palegreen", "orchid"), border = c("palegreen4", "orchid4"), width = 2)
table(oct_vect_mean1, oct_vect_mean2)
mydf1 <-t(oct_vect_mean1)
mydf1
mydf1 <- t(oct_vect_mean1, oct_vect_mean2)
mydf1 <- t(oct_vect_mean1), t(oct_vect_mean2)
mydf1 <- data.frame(t(oct_vect_mean1), t(oct_vect_mean2))
mydf1
mydf1 <- data.frame(t(oct_vect_mean1, oct_vect_mean2))
mydf1 <-t(oct_vect_mean1)
mydf1
mydf2 <- t(oct_vect_mean2)
mydf2
rbind(mydf1, mydf2)
# put groups into table
mydf1 <-t(oct_vect_mean1)
mydf2 <-t(oct_vect_mean2)
mydf <- rbind(mydf1, mydf2)
mymatrix <- as.matrix(mydf)
mymatrix
# overlaying barplots
barplot(height = mymatrix, names.arg=binnames, main= "Mean Species Abundance Distribution", xlab = "Species Abundance (Individuals per species)", ylab = "Frequency (number of species)", ylim = c(0,(limit)*1.1), xpd = FALSE, col = c("palegreen", "orchid"), border = c("palegreen4", "orchid4"), width = 2)
# overlaying barplots
barplot(mymatrix, beside = True, names.arg=binnames, main= "Mean Species Abundance Distribution", xlab = "Species Abundance (Individuals per species)", ylab = "Frequency (number of species)", ylim = c(0,(limit)*1.1), xpd = FALSE, col = c("palegreen", "orchid"), border = c("palegreen4", "orchid4"), width = 2)
# overlaying barplots
barplot(mymatrix, beside = TRUE, names.arg=binnames, main= "Mean Species Abundance Distribution", xlab = "Species Abundance (Individuals per species)", ylab = "Frequency (number of species)", ylim = c(0,(limit)*1.1), xpd = FALSE, col = c("palegreen", "orchid"), border = c("palegreen4", "orchid4"), width = 2)
# barplot(oct_vect_mean2, names.arg=binnames2, xpd = FALSE, col = "orchid", border = "orchid4", add=TRUE, width = 1, space = c(1.5, rep(2, length(binnames2)-1)))
legend("topright", legend=c("Initial maximal species richness", "Initial minimal species richness"), fill =c("palegreen", "orchid"))
rm(list=ls())
graphics.off()
source(file = "kg21_HPC_2021_main.R")
# read in the job number from the cluster:
# iter <-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
# job number for own computer:
iter <- seq(100)
set.seed(iter)
# community sizes : 500,1000,2500,5000
# personal speciation rate: 0.0066439
speciation_rate <- 0.0066439
if (iter %% 4 == 1){
size <- 500
} elif (iter %% 4 == 2){
size <-1000
} elif (iter %% 4 == 3){
size <- 2500
} elif (iter %% 4 == 0){
size <- 5000
}
# read in the job number from the cluster:
# iter <-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
# job number for own computer:
# iter <- seq(100)
iter <- 1
if (iter %% 4 == 1){
size <- 500
} elif (iter %% 4 == 2){
size <-1000
} elif (iter %% 4 == 3){
size <- 2500
} elif (iter %% 4 == 0){
size <- 5000
}
if (x == 1){
size <- 500
} elif (x == 2){
size <-1000
} elif (x == 3){
size <- 2500
} elif (x == 4){
size <- 5000
}
if (x == 1){
size <- 500
}
x <- 50
if (x == 1){
size <- 500
}
if (x == 1){
size <- 500
} elif (x == 2){
size <-1000
}
if (x == 1){
size <- 500
} elif (x == 2){
size <-1000
}
if (x == 1){
size <- 500
} else if (x == 2){
size <-1000
}
if (iter %% 4 == 1){
size <- 500
} elif (iter %% 4 == 2){
size <-1000
} elif (iter %% 4 == 3){
size <- 2500
} elif (iter %% 4 == 0)
}
if (iter %% 4 == 1){
size <- 500
} else if (iter %% 4 == 2){
size <-1000
} else if (iter %% 4 == 3){
size <- 2500
} else if (iter %% 4 == 0)
}
if (iter %% 4 == 1){
size <- 500
} else if (iter %% 4 == 2){
size <-1000
} else if (iter %% 4 == 3){
size <- 2500
} else if (iter %% 4 == 0)
size <- 5000
}
if (iter %% 4 == 1){
size <- 500
} else if (iter %% 4 == 2){
size <-1000
} else if (iter %% 4 == 3){
size <- 2500
} else if (iter %% 4 == 0){
size <- 5000
}
if (iter %% 4 == 1){
size <- 500
} else if (iter %% 4 == 2){
size <-1000
} else if (iter %% 4 == 3){
size <- 2500
} else if (iter %% 4 == 0){
size <- 5000
}
rm(list=ls())
graphics.off()
source(file = "kg21_HPC_2021_main.R")
# read in the job number from the cluster:
# iter <-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
# job number for own computer:
# iter <- seq(100)
iter <- 1
set.seed(iter)
# community sizes : 500,1000,2500,5000
# personal speciation rate: 0.0066439
speciation_rate <- 0.0066439
if (iter %% 4 == 1){
size <- 500
} else if (iter %% 4 == 2){
size <-1000
} else if (iter %% 4 == 3){
size <- 2500
} else if (iter %% 4 == 0){
size <- 5000
}
cluster_run(speciation_rate, size, wall_time=0.25, interval_rich=1, interval_oct = (size/10), burn_in_generations = (8*size), output_file_name = paste("resultiter", iter, ".rda", sep=""))
setwd("~/Documents/CMEECoursework/HPC2021/kg21")
cluster_run(speciation_rate, size, wall_time=0.25, interval_rich=1, interval_oct = (size/10), burn_in_generations = (8*size), output_file_name = paste("resultiter", iter, ".rda", sep=""))
load("~/Documents/CMEECoursework/HPC2021/kg21/resultiter1.rda")
rm(list=ls())
graphics.off()
load("~/Documents/CMEECoursework/HPC2021/kg21/resultiter1.rda")
source("~/Documents/CMEECoursework/HPC2021/kg21/clusterrun.R")
source("~/Documents/CMEECoursework/HPC2021/kg21/clusterrun.R")
source("~/Documents/CMEECoursework/HPC2021/kg21/clusterrun.R")
rm(list=ls())
load("~/Documents/CMEECoursework/HPC2021/kg21/resultiter1.rda")
source("~/Documents/CMEECoursework/HPC2021/kg21/clusterrun.R")
source("~/Documents/CMEECoursework/HPC2021/kg21/clusterrun.R")
load("~/Documents/CMEECoursework/HPC2021/kg21/resultiter1.rda")
rm(list=ls())
load("~/Documents/CMEECoursework/HPC2021/kg21/resultiter1.rda")
source("~/Documents/CMEECoursework/HPC2021/kg21/clusterrun.R")
rm(list=ls())
load("~/Documents/CMEECoursework/HPC2021/kg21/resultiter1.rda")
View(abundanceoctaves)
